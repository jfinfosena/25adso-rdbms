{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\ude80 Bienvenidos al Curso de Bases de Datos Relacionales","text":"<p>\u00a1Bienvenidos a este fascinante recorrido por el mundo de las Bases de Datos Relacionales! Este curso est\u00e1 dise\u00f1ado para introducirte en los fundamentos del dise\u00f1o, gesti\u00f3n y optimizaci\u00f3n de bases de datos, una habilidad esencial en el desarrollo de aplicaciones modernas. Ya seas principiante o tengas experiencia en programaci\u00f3n, este programa te proporcionar\u00e1 los conocimientos pr\u00e1cticos necesarios para dominar la gesti\u00f3n de datos en entornos profesionales.</p>"},{"location":"#que-aprenderas-en-este-curso","title":"\u00bfQu\u00e9 aprender\u00e1s en este curso?","text":"<p>Este curso aborda una amplia gama de temas esenciales, organizados en m\u00f3dulos te\u00f3rico-pr\u00e1cticos:</p>"},{"location":"#fundamentos-de-bases-de-datos-relacionales","title":"Fundamentos de Bases de Datos Relacionales","text":"<ul> <li>Conceptos b\u00e1sicos: Comprender\u00e1s qu\u00e9 son las bases de datos relacionales, su estructura y su importancia en la gesti\u00f3n de informaci\u00f3n.</li> <li>Modelado de datos: Aprender\u00e1s a dise\u00f1ar esquemas relacionales utilizando diagramas entidad-relaci\u00f3n (ER) y normalizaci\u00f3n.</li> <li>SQL (Structured Query Language): Dominar\u00e1s el lenguaje SQL para crear, consultar, actualizar y gestionar bases de datos.</li> <li>Sistemas de Gesti\u00f3n de Bases de Datos (SGBD): Trabajar\u00e1s con herramientas populares como MySQL, PostgreSQL o SQL Server, y explorar\u00e1s sus funcionalidades.</li> </ul>"},{"location":"#metodologia-del-curso","title":"Metodolog\u00eda del curso","text":"<p>El curso combina teor\u00eda y pr\u00e1ctica para que desarrolles habilidades s\u00f3lidas:</p> <ul> <li>Clases te\u00f3ricas: Conceptos claros sobre modelos relacionales, \u00e1lgebra relacional y principios de dise\u00f1o de bases de datos.</li> <li>Ejercicios pr\u00e1cticos: Actividades guiadas para escribir consultas SQL, dise\u00f1ar bases de datos y resolver problemas reales.</li> <li>Proyectos reales: Crear\u00e1s bases de datos funcionales para aplicaciones como sistemas de inventarios, gesti\u00f3n de clientes o plataformas de comercio electr\u00f3nico.</li> </ul>"},{"location":"#compromiso-de-el-sena","title":"Compromiso de El SENA","text":"<p>En El SENA, nuestro compromiso es tu desarrollo profesional. Este curso no solo busca ense\u00f1arte las bases de las bases de datos relacionales, sino tambi\u00e9n inspirarte a dise\u00f1ar soluciones eficientes que impulsen aplicaciones modernas. Al finalizar, tendr\u00e1s las competencias necesarias para modelar, implementar y gestionar bases de datos relacionales, optimizar procesos tecnol\u00f3gicos y contribuir a proyectos innovadores.</p>"},{"location":"#embarcate-en-esta-aventura-tecnologica","title":"\u00a1Emb\u00e1rcate en esta aventura tecnol\u00f3gica!","text":"<p>Estamos emocionados de acompa\u00f1arte en este proceso de aprendizaje. Con dedicaci\u00f3n y esfuerzo, pronto estar\u00e1s dise\u00f1ando bases de datos robustas, escribiendo consultas SQL avanzadas y resolviendo problemas reales en proyectos tecnol\u00f3gicos.</p> <p>\u00a1Bienvenido al mundo de las Bases de Datos Relacionales!</p>"},{"location":"about/","title":"\ud83d\ude80 Curso de Bases de Datos Relacionales","text":"<p>El Curso de Bases de Datos Relacionales es una iniciativa educativa del SENA, dise\u00f1ada para introducir a los estudiantes en el esencial mundo de la gesti\u00f3n de datos mediante bases de datos relacionales, con \u00e9nfasis en herramientas clave como el dise\u00f1o de esquemas, el lenguaje SQL y la optimizaci\u00f3n de sistemas de almacenamiento. Este curso combina teor\u00eda y pr\u00e1ctica para ofrecer una base s\u00f3lida en el dise\u00f1o, implementaci\u00f3n y administraci\u00f3n de bases de datos aplicables a la industria moderna.</p>"},{"location":"about/#proposito-del-curso","title":"Prop\u00f3sito del Curso","text":"<p>Este curso tiene como objetivo formar a los estudiantes en la creaci\u00f3n y gesti\u00f3n de bases de datos relacionales, capacit\u00e1ndolos para resolver problemas reales, desde el modelado de datos hasta la implementaci\u00f3n de consultas avanzadas y la integraci\u00f3n con aplicaciones. Al finalizar, los participantes estar\u00e1n listos para aplicar sus habilidades en entornos profesionales, dise\u00f1ando soluciones eficientes y participando en proyectos tecnol\u00f3gicos de alto impacto.</p> <p>\u00a1\u00danete a nosotros y comienza tu camino hacia el futuro de la gesti\u00f3n de datos con Bases de Datos Relacionales!</p>"},{"location":"blog/","title":"Blog","text":""},{"location":"content/curso/","title":"Estructura del Curso: Bases de Datos Relacionales (60 horas totales)","text":""},{"location":"content/curso/#clase-1-introduccion-a-las-bases-de-datos","title":"Clase 1: Introducci\u00f3n a las Bases de Datos","text":"<ul> <li>Objetivo: Comprender qu\u00e9 son las bases de datos y su importancia.</li> <li>Contenido:</li> <li>Definici\u00f3n y tipos de bases de datos (relacionales, no relacionales).</li> <li>Historia y evoluci\u00f3n de los SGBD (Sistemas Gestores de Bases de Datos).</li> <li>Introducci\u00f3n a los conceptos: tablas, filas, columnas, claves.</li> <li>Herramientas: MySQL, PostgreSQL, SQLite (instalaci\u00f3n y configuraci\u00f3n).</li> <li>Pr\u00e1ctica:</li> <li>Instalar un SGBD (MySQL/PostgreSQL).</li> <li>Crear una base de datos simple y explorar la interfaz.</li> <li>Evaluaci\u00f3n: Quiz sobre conceptos b\u00e1sicos y discusi\u00f3n sobre casos de uso.</li> <li>Duraci\u00f3n: Teor\u00eda (2.5h), Pr\u00e1ctica (2.5h), Evaluaci\u00f3n (1h).</li> </ul>"},{"location":"content/curso/#clase-2-fundamentos-del-modelo-relacional","title":"Clase 2: Fundamentos del Modelo Relacional","text":"<ul> <li>Objetivo: Entender los principios del modelo relacional.</li> <li>Contenido:</li> <li>Reglas de Codd para bases de datos relacionales.</li> <li>Entidades, atributos y relaciones.</li> <li>Claves primarias, for\u00e1neas y su rol.</li> <li>Normalizaci\u00f3n: conceptos b\u00e1sicos (1NF, 2NF, 3NF).</li> <li>Pr\u00e1ctica:</li> <li>Dise\u00f1ar un esquema relacional simple (ejemplo: sistema de biblioteca).</li> <li>Identificar claves primarias y for\u00e1neas en diagramas.</li> <li>Evaluaci\u00f3n: Ejercicio de modelado b\u00e1sico y revisi\u00f3n grupal.</li> <li>Duraci\u00f3n: Teor\u00eda (2.5h), Pr\u00e1ctica (2.5h), Evaluaci\u00f3n (1h).</li> </ul>"},{"location":"content/curso/#clase-3-lenguaje-sql-fundamentos","title":"Clase 3: Lenguaje SQL - Fundamentos","text":"<ul> <li>Objetivo: Aprender los comandos b\u00e1sicos de SQL.</li> <li>Contenido:</li> <li>Estructura de SQL: DDL, DML, DCL, TCL.</li> <li>Comandos b\u00e1sicos: CREATE, INSERT, SELECT, UPDATE, DELETE.</li> <li>Tipos de datos en SQL (INT, VARCHAR, DATE, etc.).</li> <li>Pr\u00e1ctica:</li> <li>Crear tablas con restricciones (NOT NULL, UNIQUE).</li> <li>Insertar y consultar datos en una base de datos predefinida.</li> <li>Evaluaci\u00f3n: Resolver ejercicios de consultas b\u00e1sicas.</li> <li>Duraci\u00f3n: Teor\u00eda (2h), Pr\u00e1ctica (3h), Evaluaci\u00f3n (1h).</li> </ul>"},{"location":"content/curso/#clase-4-consultas-avanzadas-en-sql","title":"Clase 4: Consultas Avanzadas en SQL","text":"<ul> <li>Objetivo: Dominar consultas m\u00e1s complejas.</li> <li>Contenido:</li> <li>Operadores: WHERE, AND, OR, LIKE, BETWEEN.</li> <li>Funciones de agregaci\u00f3n: COUNT, SUM, AVG, MAX, MIN.</li> <li>Ordenaci\u00f3n (ORDER BY) y agrupaci\u00f3n (GROUP BY, HAVING).</li> <li>Pr\u00e1ctica:</li> <li>Escribir consultas con filtros y agregaciones (ejemplo: ventas por regi\u00f3n).</li> <li>Resolver problemas pr\u00e1cticos con datos reales.</li> <li>Evaluaci\u00f3n: Mini-proyecto de consultas sobre un dataset.</li> <li>Duraci\u00f3n: Teor\u00eda (2h), Pr\u00e1ctica (3h), Evaluaci\u00f3n (1h).</li> </ul>"},{"location":"content/curso/#clase-5-relaciones-y-joins","title":"Clase 5: Relaciones y Joins","text":"<ul> <li>Objetivo: Comprender y aplicar relaciones entre tablas.</li> <li>Contenido:</li> <li>Tipos de relaciones: 1:1, 1:N, N:N.</li> <li>Tipos de JOIN: INNER, LEFT, RIGHT, FULL.</li> <li>Uso de claves for\u00e1neas en consultas.</li> <li>Pr\u00e1ctica:</li> <li>Crear una base de datos con m\u00faltiples tablas relacionadas.</li> <li>Escribir consultas con JOINs para combinar datos.</li> <li>Evaluaci\u00f3n: Ejercicios de JOINs y discusi\u00f3n de resultados.</li> <li>Duraci\u00f3n: Teor\u00eda (2.5h), Pr\u00e1ctica (2.5h), Evaluaci\u00f3n (1h).</li> </ul>"},{"location":"content/curso/#clase-6-normalizacion-y-diseno-de-bases-de-datos","title":"Clase 6: Normalizaci\u00f3n y Dise\u00f1o de Bases de Datos","text":"<ul> <li>Objetivo: Dise\u00f1ar bases de datos eficientes.</li> <li>Contenido:</li> <li>Proceso de normalizaci\u00f3n en detalle (hasta 3NF).</li> <li>Diagramas ER (Entidad-Relaci\u00f3n) y su traducci\u00f3n a tablas.</li> <li>Buenas pr\u00e1cticas en dise\u00f1o de bases de datos.</li> <li>Pr\u00e1ctica:</li> <li>Dise\u00f1ar un diagrama ER para un caso pr\u00e1ctico (ejemplo: tienda online).</li> <li>Normalizar un conjunto de datos no estructurado.</li> <li>Evaluaci\u00f3n: Presentaci\u00f3n de diagramas ER y retroalimentaci\u00f3n.</li> <li>Duraci\u00f3n: Teor\u00eda (2.5h), Pr\u00e1ctica (2.5h), Evaluaci\u00f3n (1h).</li> </ul>"},{"location":"content/curso/#clase-7-indices-y-optimizacion","title":"Clase 7: \u00cdndices y Optimizaci\u00f3n","text":"<ul> <li>Objetivo: Mejorar el rendimiento de las bases de datos.</li> <li>Contenido:</li> <li>Qu\u00e9 son los \u00edndices y c\u00f3mo funcionan.</li> <li>Creaci\u00f3n y gesti\u00f3n de \u00edndices (CREATE INDEX).</li> <li>Introducci\u00f3n al an\u00e1lisis de rendimiento (EXPLAIN PLAN).</li> <li>Pr\u00e1ctica:</li> <li>Crear \u00edndices en una base de datos existente.</li> <li>Comparar tiempos de consulta con y sin \u00edndices.</li> <li>Evaluaci\u00f3n: An\u00e1lisis de consultas optimizadas.</li> <li>Duraci\u00f3n: Teor\u00eda (2h), Pr\u00e1ctica (3h), Evaluaci\u00f3n (1h).</li> </ul>"},{"location":"content/curso/#clase-8-transacciones-y-seguridad","title":"Clase 8: Transacciones y Seguridad","text":"<ul> <li>Objetivo: Gestionar transacciones y proteger datos.</li> <li>Contenido:</li> <li>Concepto de transacciones: ACID.</li> <li>Comandos: COMMIT, ROLLBACK, SAVEPOINT.</li> <li>Gesti\u00f3n de usuarios y permisos (GRANT, REVOKE).</li> <li>Pr\u00e1ctica:</li> <li>Simular transacciones en un escenario real (ejemplo: transferencias bancarias).</li> <li>Configurar roles y permisos en una base de datos.</li> <li>Evaluaci\u00f3n: Ejercicio de transacciones y revisi\u00f3n de seguridad.</li> <li>Duraci\u00f3n: Teor\u00eda (2.5h), Pr\u00e1ctica (2.5h), Evaluaci\u00f3n (1h).</li> </ul>"},{"location":"content/curso/#clase-9-introduccion-a-procedimientos-y-triggers","title":"Clase 9: Introducci\u00f3n a Procedimientos y Triggers","text":"<ul> <li>Objetivo: Automatizar tareas en bases de datos.</li> <li>Contenido:</li> <li>Procedimientos almacenados: creaci\u00f3n y uso.</li> <li>Triggers: definici\u00f3n y casos de uso.</li> <li>Introducci\u00f3n a vistas (CREATE VIEW).</li> <li>Pr\u00e1ctica:</li> <li>Crear un procedimiento almacenado para un caso pr\u00e1ctico.</li> <li>Implementar un trigger para auditor\u00eda.</li> <li>Evaluaci\u00f3n: Desarrollo de un trigger funcional.</li> <li>Duraci\u00f3n: Teor\u00eda (2h), Pr\u00e1ctica (3h), Evaluaci\u00f3n (1h).</li> </ul>"},{"location":"content/curso/#clase-10-proyecto-final-y-cierre","title":"Clase 10: Proyecto Final y Cierre","text":"<ul> <li>Objetivo: Aplicar todo lo aprendido en un proyecto integral.</li> <li>Contenido:</li> <li>Revisi\u00f3n de conceptos clave.</li> <li>Buenas pr\u00e1cticas en desarrollo y mantenimiento de bases de datos.</li> <li>Introducci\u00f3n a temas avanzados (NoSQL, replicaci\u00f3n, escalabilidad).</li> <li>Pr\u00e1ctica:</li> <li>Proyecto final: dise\u00f1ar y desarrollar una base de datos completa (ejemplo: sistema de gesti\u00f3n escolar o tienda online).</li> <li>Presentaci\u00f3n de resultados.</li> <li>Evaluaci\u00f3n: Evaluaci\u00f3n del proyecto (funcionalidad, dise\u00f1o, consultas) y retroalimentaci\u00f3n grupal.</li> <li>Duraci\u00f3n: Teor\u00eda (1.5h), Pr\u00e1ctica (3.5h), Evaluaci\u00f3n (1h).</li> </ul>"},{"location":"content/curso/#notas-adicionales","title":"Notas Adicionales","text":"<ul> <li>Recursos:</li> <li>Software: MySQL Workbench, pgAdmin, DBeaver.</li> <li>Datasets de pr\u00e1ctica: datos abiertos (Kaggle, bases de datos de ejemplo como Sakila o Northwind).</li> <li>Material te\u00f3rico: presentaciones, gu\u00edas de SQL, diagramas ER.</li> <li>Metodolog\u00eda:</li> <li>Clases interactivas con ejemplos reales.</li> <li>Ejercicios progresivos para reforzar conceptos.</li> <li>Proyecto final para integrar conocimientos.</li> <li>Evaluaci\u00f3n:</li> <li>Participaci\u00f3n en clase (20%).</li> <li>Ejercicios pr\u00e1cticos (30%).</li> <li>Proyecto final (50%).</li> <li>Adaptaciones:</li> <li>Si el grupo tiene experiencia previa, acelerar los temas iniciales y profundizar en optimizaci\u00f3n o temas avanzados.</li> <li>Incluir descansos cada 1.5-2 horas para mantener la atenci\u00f3n.</li> </ul>"},{"location":"content/p0/","title":"Definici\u00f3n y Tipos de Bases de Datos","text":""},{"location":"content/p0/#definicion-de-bases-de-datos","title":"Definici\u00f3n de Bases de Datos","text":"<p>Una base de datos es una colecci\u00f3n organizada de datos, dise\u00f1ada para almacenar, gestionar y recuperar informaci\u00f3n de manera eficiente. En esencia, es un sistema que permite estructurar datos de forma que puedan ser consultados, actualizados y gestionados f\u00e1cilmente, ya sea por usuarios o aplicaciones. Las bases de datos son fundamentales en cualquier sistema que requiera persistencia de datos, como aplicaciones web, sistemas empresariales, an\u00e1lisis de datos, entre otros.</p> <p>Formalmente, una base de datos se define como un conjunto de datos relacionados entre s\u00ed, organizados seg\u00fan un esquema o modelo que facilita su manipulaci\u00f3n. Por ejemplo, una base de datos de una tienda online podr\u00eda incluir informaci\u00f3n sobre productos, clientes y pedidos, estructurada para permitir consultas como \"mostrar todos los pedidos de un cliente espec\u00edfico\".</p>"},{"location":"content/p0/#tipos-de-bases-de-datos","title":"Tipos de Bases de Datos","text":"<p>Las bases de datos se clasifican seg\u00fan el modelo de datos que utilizan para organizar la informaci\u00f3n. Los dos grandes tipos son relacionales y no relacionales, aunque existen otros modelos menos comunes.</p>"},{"location":"content/p0/#bases-de-datos-relacionales","title":"Bases de Datos Relacionales","text":"<ul> <li>Definici\u00f3n: Las bases de datos relacionales organizan los datos en tablas (tambi\u00e9n llamadas relaciones), donde cada tabla contiene filas (registros) y columnas (atributos). Estas tablas est\u00e1n conectadas mediante claves que permiten establecer relaciones entre ellas. Este modelo se basa en los principios matem\u00e1ticos de la teor\u00eda de conjuntos y la l\u00f3gica relacional, propuestos por Edgar F. Codd en 1970.</li> <li>Caracter\u00edsticas:<ul> <li>Estructura r\u00edgida: los datos deben seguir un esquema predefinido (columnas con tipos de datos espec\u00edficos).</li> <li>Uso de SQL (Structured Query Language) para consultas y manipulaciones.</li> <li>Soporte para relaciones entre tablas mediante claves primarias y for\u00e1neas.</li> <li>Garantizan consistencia y cumplimiento de reglas de integridad (por ejemplo, no se puede eliminar un cliente si tiene pedidos asociados).</li> </ul> </li> <li>Ejemplos de uso:<ul> <li>Sistemas bancarios (gesti\u00f3n de cuentas y transacciones).</li> <li>Aplicaciones empresariales como ERP o CRM.</li> <li>Tiendas online (gesti\u00f3n de productos, clientes y pedidos).</li> </ul> </li> <li>Ventajas:<ul> <li>Estructura clara y estandarizada.</li> <li>Consultas complejas mediante SQL.</li> <li>Alta consistencia de datos (propiedades ACID: Atomicidad, Consistencia, Aislamiento, Durabilidad).</li> </ul> </li> <li>Desventajas:<ul> <li>Escalabilidad limitada en entornos con grandes vol\u00famenes de datos o alta concurrencia.</li> <li>Menos flexibilidad para datos no estructurados o cambiantes.</li> </ul> </li> <li>Ejemplos de SGBD relacionales: MySQL, PostgreSQL, Oracle Database, Microsoft SQL Server, SQLite.</li> </ul>"},{"location":"content/p0/#bases-de-datos-no-relacionales-nosql","title":"Bases de Datos No Relacionales (NoSQL)","text":"<ul> <li>Definici\u00f3n: Las bases de datos no relacionales, tambi\u00e9n conocidas como NoSQL, est\u00e1n dise\u00f1adas para manejar datos no estructurados, semiestructurados o estructurados, sin requerir un esquema fijo. Surgieron para abordar las limitaciones de las bases de datos relacionales en entornos modernos con grandes vol\u00famenes de datos, alta escalabilidad y necesidades de flexibilidad.</li> <li>Tipos principales:<ol> <li>Clave-Valor: Almacenan datos como pares clave-valor (similar a un diccionario). Ejemplo: Redis, DynamoDB.</li> <li>Documentales: Almacenan datos en documentos (generalmente en formato JSON o BSON). Ejemplo: MongoDB, CouchDB.</li> <li>Columnares: Organizan datos en familias de columnas, optimizadas para an\u00e1lisis de big data. Ejemplo: Cassandra, HBase.</li> <li>Gr\u00e1ficas: Dise\u00f1adas para representar relaciones complejas mediante nodos y aristas. Ejemplo: Neo4j, ArangoDB.</li> </ol> </li> <li>Caracter\u00edsticas:<ul> <li>Esquema flexible: no requieren una estructura fija, lo que permite cambios din\u00e1micos.</li> <li>Dise\u00f1adas para escalar horizontalmente (agregar m\u00e1s servidores).</li> <li>Optimizadas para grandes vol\u00famenes de datos y alta velocidad.</li> </ul> </li> <li>Ejemplos de uso:<ul> <li>Redes sociales (gesti\u00f3n de perfiles y conexiones en gr\u00e1ficas).</li> <li>An\u00e1lisis de big data (bases columnares).</li> <li>Aplicaciones web con datos semiestructurados (documentales).</li> </ul> </li> <li>Ventajas:<ul> <li>Alta escalabilidad y rendimiento en entornos distribuidos.</li> <li>Flexibilidad para manejar datos variados.</li> <li>Ideal para aplicaciones modernas como IoT, redes sociales o e-commerce.</li> </ul> </li> <li>Desventajas:<ul> <li>Menor consistencia en comparaci\u00f3n con bases relacionales (algunas priorizan disponibilidad sobre consistencia, seg\u00fan el teorema CAP).</li> <li>Consultas menos estandarizadas (dependen del sistema).</li> </ul> </li> <li>Ejemplos de SGBD no relacionales: MongoDB, Redis, Cassandra, Neo4j.</li> </ul>"},{"location":"content/p0/#comparacion-relacionales-vs-no-relacionales","title":"Comparaci\u00f3n Relacionales vs. No Relacionales","text":"Caracter\u00edstica Relacionales No Relacionales Estructura Tablas con esquema fijo Documentos, clave-valor, etc. Lenguaje SQL Var\u00eda (JSON, APIs espec\u00edficas) Escalabilidad Vertical (m\u00e1s potencia) Horizontal (m\u00e1s servidores) Consistencia Alta (ACID) Variable (eventual o fuerte) Casos de uso Datos estructurados, transacciones Datos no estructurados, big data"},{"location":"content/p0/#historia-y-evolucion-de-los-sgbd","title":"Historia y Evoluci\u00f3n de los SGBD","text":""},{"location":"content/p0/#origenes-de-los-sgbd","title":"Or\u00edgenes de los SGBD","text":"<p>Los Sistemas Gestores de Bases de Datos (SGBD) son programas que facilitan la creaci\u00f3n, gesti\u00f3n y consulta de bases de datos. Su evoluci\u00f3n est\u00e1 ligada al desarrollo de la inform\u00e1tica y la necesidad de manejar datos de forma eficiente.</p> <ul> <li> <p>A\u00f1os 1960: Bases de Datos Jer\u00e1rquicas y de Red</p> <ul> <li>Las primeras bases de datos surgieron en los a\u00f1os 60 con el aumento de la capacidad de almacenamiento en computadoras.</li> <li>Bases Jer\u00e1rquicas: IBM desarroll\u00f3 IMS (Information Management System) para gestionar datos en una estructura de \u00e1rbol. Usado en aplicaciones como la gesti\u00f3n de inventarios.</li> <li>Bases de Red: El modelo CODASYL permiti\u00f3 relaciones m\u00e1s complejas, pero era dif\u00edcil de implementar y mantener.</li> <li>Limitaciones: falta de flexibilidad, dependencia de programadores para consultas, y estructuras r\u00edgidas.</li> </ul> </li> <li> <p>A\u00f1os 1970: El Modelo Relacional</p> <ul> <li>En 1970, Edgar F. Codd, matem\u00e1tico de IBM, public\u00f3 su art\u00edculo seminal \"A Relational Model of Data for Large Shared Data Banks\", sentando las bases del modelo relacional.</li> <li>Codd propuso organizar datos en tablas y usar \u00e1lgebra relacional para consultas, lo que simplific\u00f3 la gesti\u00f3n de datos.</li> <li>Surgieron los primeros SGBD relacionales experimentales, como System R (IBM) y INGRES (Universidad de California).</li> <li>Introducci\u00f3n de SQL como lenguaje est\u00e1ndar para interactuar con bases de datos relacionales.</li> </ul> </li> <li> <p>A\u00f1os 1980: Popularizaci\u00f3n de los SGBD Relacionales</p> <ul> <li>Los SGBD relacionales se convirtieron en el est\u00e1ndar gracias a su simplicidad y robustez.</li> <li>Empresas como Oracle, IBM (con DB2) y Microsoft (SQL Server) lanzaron productos comerciales.</li> <li>SQL se estandariz\u00f3 (ANSI SQL en 1986), facilitando la interoperabilidad.</li> <li>Aplicaciones: sistemas bancarios, gesti\u00f3n empresarial, y primeros sistemas de comercio electr\u00f3nico.</li> </ul> </li> <li> <p>A\u00f1os 1990: Mejoras y Especializaci\u00f3n</p> <ul> <li>Los SGBD relacionales incorporaron caracter\u00edsticas avanzadas como \u00edndices, transacciones, y soporte para grandes vol\u00famenes de datos.</li> <li>Surgieron SGBD m\u00e1s ligeros, como MySQL (1995), dise\u00f1ados para aplicaciones web.</li> <li>Introducci\u00f3n de bases de datos orientadas a objetos (por ejemplo, ObjectStore) para integrar con lenguajes como C++ y Java.</li> <li>Creciente inter\u00e9s en data warehouses y an\u00e1lisis de datos.</li> </ul> </li> <li> <p>A\u00f1os 2000: El Auge de NoSQL</p> <ul> <li>Con la explosi\u00f3n de internet, las aplicaciones web (como Google, Amazon, Facebook) requer\u00edan manejar grandes vol\u00famenes de datos no estructurados y alta escalabilidad.</li> <li>Surgieron las bases de datos NoSQL, como MongoDB (2009), Cassandra (2008) y Redis (2009), dise\u00f1adas para escalar horizontalmente y manejar datos diversos.</li> <li>Los SGBD relacionales evolucionaron para competir, incorporando soporte para JSON, XML y replicaci\u00f3n.</li> </ul> </li> <li> <p>A\u00f1os 2010-Presente: H\u00edbridos y Cloud</p> <ul> <li>Los SGBD modernos combinan caracter\u00edsticas relacionales y no relacionales. Ejemplo: PostgreSQL soporta JSONB, y SQL Server incluye caracter\u00edsticas de big data.</li> <li>Auge de bases de datos en la nube: Amazon RDS, Google Cloud Spanner, Azure Cosmos DB.</li> <li>Enfoque en inteligencia artificial, aprendizaje autom\u00e1tico y an\u00e1lisis en tiempo real.</li> <li>SGBD especializados: bases de datos temporales, espaciales, y gr\u00e1ficas para casos como IoT, GIS, y redes sociales.</li> </ul> </li> </ul>"},{"location":"content/p0/#introduccion-a-los-conceptos-tablas-filas-columnas-claves","title":"Introducci\u00f3n a los Conceptos: Tablas, Filas, Columnas, Claves","text":"<p>Los conceptos fundamentales de las bases de datos relacionales son esenciales para entender c\u00f3mo se estructuran y gestionan los datos. A continuaci\u00f3n, se explican en detalle:</p>"},{"location":"content/p0/#tablas","title":"Tablas","text":"<ul> <li>Una tabla es la unidad b\u00e1sica de almacenamiento en una base de datos relacional. Representa una entidad del mundo real, como \"Clientes\", \"Productos\" o \"Pedidos\".</li> <li>Cada tabla est\u00e1 formada por filas y columnas, similar a una hoja de c\u00e1lculo.</li> <li>Ejemplo: Una tabla \"Clientes\" podr\u00eda tener columnas como \"ID_Cliente\", \"Nombre\", \"Correo\" y filas que representen clientes espec\u00edficos.</li> </ul>"},{"location":"content/p0/#filas","title":"Filas","text":"<ul> <li>Una fila (o registro) representa una instancia \u00fanica de la entidad modelada por la tabla.</li> <li>Por ejemplo, en la tabla \"Clientes\", una fila podr\u00eda ser: <code>[1, \"Ana P\u00e9rez\", \"ana@example.com\"]</code>.</li> <li>Cada fila debe ser \u00fanica dentro de la tabla, lo que se garantiza mediante una clave primaria.</li> </ul>"},{"location":"content/p0/#columnas","title":"Columnas","text":"<ul> <li>Una columna (o atributo) representa una propiedad de la entidad.</li> <li>Cada columna tiene un tipo de dato definido, como:</li> <li><code>INT</code>: para n\u00fameros enteros (ejemplo: ID_Cliente).</li> <li><code>VARCHAR</code>: para texto (ejemplo: Nombre).</li> <li><code>DATE</code>: para fechas (ejemplo: Fecha_Registro).</li> <li>Las columnas tambi\u00e9n pueden tener restricciones, como <code>NOT NULL</code> (el valor no puede estar vac\u00edo) o <code>UNIQUE</code> (el valor debe ser \u00fanico).</li> </ul>"},{"location":"content/p0/#claves","title":"Claves","text":"<p>Las claves son fundamentales para establecer relaciones y garantizar la integridad de los datos:</p> <ul> <li>Clave Primaria (Primary Key):<ul> <li>Es un campo (o combinaci\u00f3n de campos) que identifica de forma \u00fanica cada fila en una tabla.</li> <li>Ejemplo: En la tabla \"Clientes\", el campo \"ID_Cliente\" podr\u00eda ser la clave primaria.</li> <li>Propiedades: debe ser \u00fanica y no nula.</li> </ul> </li> <li>Clave For\u00e1nea (Foreign Key):<ul> <li>Es un campo en una tabla que referencia la clave primaria de otra tabla, estableciendo una relaci\u00f3n.</li> <li>Ejemplo: En la tabla \"Pedidos\", el campo \"ID_Cliente\" podr\u00eda ser una clave for\u00e1nea que apunta a \"ID_Cliente\" en la tabla \"Clientes\".</li> <li>Garantiza integridad referencial: no se puede insertar un pedido con un ID_Cliente que no exista en la tabla \"Clientes\".</li> </ul> </li> </ul>"},{"location":"content/p0/#ejemplo-practico","title":"Ejemplo Pr\u00e1ctico","text":"<p>Imagina una base de datos para una tienda: - Tabla: Clientes <pre><code>ID_Cliente (PK) | Nombre       | Correo\n1               | Ana P\u00e9rez    | ana@example.com\n2               | Juan G\u00f3mez   | juan@example.com\n</code></pre> - Tabla: Pedidos <pre><code>ID_Pedido (PK) | ID_Cliente (FK) | Fecha\n101            | 1               | 2025-05-01\n102            | 2               | 2025-05-02\n</code></pre> - Aqu\u00ed, <code>ID_Cliente</code> en \"Pedidos\" es una clave for\u00e1nea que conecta con <code>ID_Cliente</code> en \"Clientes\", permitiendo consultas como \"mostrar todos los pedidos de Ana P\u00e9rez\".</p>"},{"location":"content/p0/#herramientas-mysql-postgresql-sqlite-instalacion-y-configuracion","title":"Herramientas: MySQL, PostgreSQL, SQLite (Instalaci\u00f3n y Configuraci\u00f3n)","text":"<p>Los Sistemas Gestores de Bases de Datos (SGBD) son el software que permite crear, gestionar y consultar bases de datos. A continuaci\u00f3n, se describen tres SGBD relacionales populares, sus caracter\u00edsticas, y c\u00f3mo instalarlos y configurarlos.</p>"},{"location":"content/p0/#mysql","title":"MySQL","text":"<ul> <li>Descripci\u00f3n:<ul> <li>MySQL es un SGBD relacional de c\u00f3digo abierto, ampliamente utilizado en aplicaciones web debido a su simplicidad, velocidad y compatibilidad.</li> <li>Propiedad de Oracle, pero con una versi\u00f3n comunitaria gratuita.</li> <li>Ideal para proyectos peque\u00f1os a medianos, como sitios web en PHP o aplicaciones de e-commerce.</li> </ul> </li> <li>Caracter\u00edsticas:<ul> <li>Soporte para SQL est\u00e1ndar.</li> <li>Alta velocidad en consultas de lectura.</li> <li>Compatible con m\u00faltiples plataformas (Windows, Linux, macOS).</li> <li>Amplia comunidad y documentaci\u00f3n.</li> </ul> </li> <li>Instalaci\u00f3n:<ol> <li>Descarga MySQL Community Server desde mysql.com.</li> <li>Selecciona la versi\u00f3n para tu sistema operativo (Windows, Linux, macOS).</li> <li>Sigue el instalador:</li> <li>Configura una contrase\u00f1a para el usuario root.</li> <li>Instala MySQL Workbench (interfaz gr\u00e1fica opcional).</li> <li>En Linux, usa comandos como:   <pre><code>sudo apt update\nsudo apt install mysql-server\nsudo mysql_secure_installation\n</code></pre></li> </ol> </li> <li>Configuraci\u00f3n:<ul> <li>Inicia el servicio: <code>sudo systemctl start mysql</code> (Linux) o usa el panel de control en Windows.</li> <li>Accede al cliente: <code>mysql -u root -p</code> y escribe la contrase\u00f1a.</li> <li>Crea una base de datos de prueba:   <pre><code>CREATE DATABASE tienda;\nUSE tienda;\n</code></pre></li> </ul> </li> <li>Herramientas complementarias: MySQL Workbench, phpMyAdmin.</li> </ul>"},{"location":"content/p0/#postgresql","title":"PostgreSQL","text":"<ul> <li>Descripci\u00f3n:<ul> <li>PostgreSQL es un SGBD relacional de c\u00f3digo abierto, conocido por su robustez, cumplimiento de est\u00e1ndares y soporte para caracter\u00edsticas avanzadas.</li> <li>Ideal para aplicaciones empresariales, an\u00e1lisis de datos y proyectos que requieren escalabilidad.</li> </ul> </li> <li>Caracter\u00edsticas:<ul> <li>Soporte para JSONB, datos espaciales (PostGIS), y extensiones.</li> <li>Cumple estrictamente con SQL est\u00e1ndar.</li> <li>Alta consistencia y soporte para transacciones complejas.</li> <li>Compatible con Windows, Linux, macOS.</li> </ul> </li> <li>Instalaci\u00f3n:<ol> <li>Descarga PostgreSQL desde postgresql.org.</li> <li>Sigue el instalador:</li> <li>Configura la contrase\u00f1a para el usuario \"postgres\".</li> <li>Instala pgAdmin (interfaz gr\u00e1fica opcional).</li> <li>En Linux:   <pre><code>sudo apt update\nsudo apt install postgresql postgresql-contrib\nsudo systemctl start postgresql\n</code></pre></li> </ol> </li> <li>Configuraci\u00f3n:</li> <li>Accede como usuario postgres: <code>sudo -u postgres psql</code>.</li> <li>Crea una base de datos:      <pre><code>CREATE DATABASE tienda;\n\\c tienda\n</code></pre></li> <li>Configura permisos si es necesario:      <pre><code>CREATE USER usuario WITH PASSWORD 'contrase\u00f1a';\nGRANT ALL PRIVILEGES ON DATABASE tienda TO usuario;\n</code></pre></li> <li>Herramientas complementarias: pgAdmin, DBeaver.</li> </ul>"},{"location":"content/p0/#sqlite","title":"SQLite","text":"<ul> <li>Descripci\u00f3n:<ul> <li>SQLite es un SGBD relacional ligero, sin servidor, que almacena la base de datos en un solo archivo.</li> <li>Ideal para aplicaciones m\u00f3viles, dispositivos embebidos o proyectos peque\u00f1os.</li> <li>No requiere configuraci\u00f3n de servidor, lo que lo hace extremadamente port\u00e1til.</li> </ul> </li> <li>Caracter\u00edsticas:<ul> <li>C\u00f3digo abierto y sin dependencias externas.</li> <li>Soporte para SQL b\u00e1sico (algunas limitaciones en caracter\u00edsticas avanzadas).</li> <li>Perfecto para prototipos o aplicaciones standalone.</li> </ul> </li> <li>Instalaci\u00f3n:<ol> <li>Descarga SQLite desde sqlite.org.</li> <li>En muchos sistemas, ya est\u00e1 preinstalado (por ejemplo, en Python).</li> <li>En Linux:   <pre><code>sudo apt update\nsudo apt install sqlite3\n</code></pre></li> </ol> </li> <li>Configuraci\u00f3n:<ul> <li>Abre el cliente: <code>sqlite3 tienda.db</code>.</li> <li>Crea una tabla directamente:   <pre><code>CREATE TABLE clientes (id INTEGER PRIMARY KEY, nombre TEXT, correo TEXT);\n</code></pre></li> <li>Usa herramientas como DB Browser for SQLite para una interfaz gr\u00e1fica.</li> </ul> </li> <li>Herramientas complementarias: DB Browser for SQLite, SQLiteStudio.</li> </ul>"},{"location":"content/p0/#comparacion-de-mysql-postgresql-y-sqlite","title":"Comparaci\u00f3n de MySQL, PostgreSQL y SQLite","text":"Caracter\u00edstica MySQL PostgreSQL SQLite Tipo Cliente-Servidor Cliente-Servidor Sin servidor Casos de uso Web, e-commerce Empresarial, an\u00e1lisis M\u00f3viles, prototipos Escalabilidad Media-Alta Alta Baja Complejidad instalaci\u00f3n Media Media-Alta Muy baja Soporte avanzado Limitado (JSON, etc.) Muy alto (JSONB, PostGIS) B\u00e1sico"},{"location":"content/p0/#recomendaciones-para-el-curso","title":"Recomendaciones para el Curso","text":"<ul> <li>MySQL: Usar para introducir SQL y trabajar con aplicaciones web.</li> <li>PostgreSQL: Ideal para ense\u00f1ar conceptos avanzados y proyectos m\u00e1s complejos.</li> <li>SQLite: Perfecto para pr\u00e1cticas iniciales sin necesidad de configurar servidores.</li> </ul>"},{"location":"content/p1/","title":"Entidades, Atributos y Relaciones en Bases de Datos Relacionales","text":"<p>En el dise\u00f1o de bases de datos relacionales, los conceptos de entidades, atributos y relaciones son fundamentales para modelar y estructurar datos de manera eficiente. Adem\u00e1s, las claves primarias y for\u00e1neas desempe\u00f1an un papel crucial en garantizar la integridad y la relaci\u00f3n entre los datos. </p>"},{"location":"content/p1/#1-entidades","title":"1. Entidades","text":"<p>Una entidad representa un objeto o concepto del mundo real que tiene una existencia independiente y que puede ser descrito mediante un conjunto de propiedades. En una base de datos relacional, las entidades se convierten en tablas. Cada entidad tiene un conjunto de caracter\u00edsticas que la describen, conocidas como atributos.</p>"},{"location":"content/p1/#tipos-de-entidades","title":"Tipos de Entidades","text":"<ul> <li>Entidades fuertes: Son independientes y no dependen de otras entidades para existir. Ejemplo: Una entidad \"Estudiante\" puede existir sin necesidad de otra entidad.</li> <li>Entidades d\u00e9biles: Dependen de otra entidad (entidad fuerte) para existir. Ejemplo: Una entidad \"Matr\u00edcula\" depende de las entidades \"Estudiante\" y \"Curso\".</li> </ul>"},{"location":"content/p1/#ejemplo-de-entidad","title":"Ejemplo de Entidad","text":"<p>Imagina una base de datos para una universidad. Una entidad podr\u00eda ser Estudiante. Esta entidad se representar\u00e1 como una tabla en la base de datos, donde cada fila corresponde a un estudiante espec\u00edfico.</p> <p>Tabla Estudiante:</p> ID_Estudiante Nombre Apellido Fecha_Nacimiento 1 Juan P\u00e9rez 2000-05-15 2 Mar\u00eda G\u00f3mez 1999-08-22 <p>En este caso, la entidad \"Estudiante\" est\u00e1 representada por la tabla, y cada fila es una instancia de la entidad.</p>"},{"location":"content/p1/#2-atributos","title":"2. Atributos","text":"<p>Los atributos son las propiedades o caracter\u00edsticas que describen a una entidad. En t\u00e9rminos de bases de datos, los atributos corresponden a las columnas de una tabla. Cada atributo tiene un dominio, que define el conjunto de valores v\u00e1lidos que puede tomar.</p>"},{"location":"content/p1/#tipos-de-atributos","title":"Tipos de Atributos","text":"<ul> <li>Atributos simples: No se dividen en subpartes. Ejemplo: \"Nombre\" de un estudiante.</li> <li>Atributos compuestos: Pueden dividirse en partes m\u00e1s peque\u00f1as. Ejemplo: \"Direcci\u00f3n\" puede dividirse en \"Calle\", \"Ciudad\", \"C\u00f3digo Postal\".</li> <li>Atributos monovaluados: Tienen un solo valor por entidad. Ejemplo: \"ID_Estudiante\".</li> <li>Atributos multivaluados: Pueden tener m\u00faltiples valores. Ejemplo: \"Tel\u00e9fonos\" de un estudiante (puede tener varios n\u00fameros).</li> <li>Atributos derivados: Su valor se calcula a partir de otros atributos. Ejemplo: \"Edad\" se deriva de \"Fecha_Nacimiento\".</li> </ul>"},{"location":"content/p1/#ejemplo-de-atributos","title":"Ejemplo de Atributos","text":"<p>En la tabla \"Estudiante\" anterior, los atributos son: - ID_Estudiante: Un identificador \u00fanico (atributo monovaluado). - Nombre: Nombre del estudiante (atributo simple). - Apellido: Apellido del estudiante (atributo simple). - Fecha_Nacimiento: Fecha de nacimiento (atributo simple).</p> <p>Si quisi\u00e9ramos agregar un atributo compuesto como \"Direcci\u00f3n\", la tabla podr\u00eda expandirse:</p> <p>Tabla Estudiante (con Direcci\u00f3n):</p> ID_Estudiante Nombre Apellido Fecha_Nacimiento Direcci\u00f3n_Calle Direcci\u00f3n_Ciudad Direcci\u00f3n_C\u00f3digoPostal 1 Juan P\u00e9rez 2000-05-15 Av. Libertad 123 Bogot\u00e1 110111 2 Mar\u00eda G\u00f3mez 1999-08-22 Calle 45 # 12 Medell\u00edn 050012 <p>Aqu\u00ed, \"Direcci\u00f3n\" es un atributo compuesto que incluye \"Calle\", \"Ciudad\" y \"C\u00f3digo Postal\".</p>"},{"location":"content/p1/#3-relaciones","title":"3. Relaciones","text":"<p>Una relaci\u00f3n describe c\u00f3mo las entidades est\u00e1n asociadas entre s\u00ed. En una base de datos relacional, las relaciones se implementan mediante claves for\u00e1neas y, en algunos casos, tablas intermedias (para relaciones muchos-a-muchos). Las relaciones permiten conectar datos entre tablas para modelar interacciones del mundo real.</p>"},{"location":"content/p1/#tipos-de-relaciones","title":"Tipos de Relaciones","text":"<ul> <li>Uno a uno (1:1): Una instancia de una entidad A se relaciona con exactamente una instancia de una entidad B, y viceversa. Ejemplo: Una persona tiene un \u00fanico pasaporte, y un pasaporte pertenece a una \u00fanica persona.</li> <li>Uno a muchos (1:N): Una instancia de una entidad A se relaciona con m\u00faltiples instancias de una entidad B, pero una instancia de B solo se relaciona con una instancia de A. Ejemplo: Un departamento tiene muchos empleados, pero un empleado pertenece a un solo departamento.</li> <li>Muchos a muchos (N:N): M\u00faltiples instancias de una entidad A se relacionan con m\u00faltiples instancias de una entidad B. Ejemplo: Un estudiante puede inscribirse en varios cursos, y un curso puede tener varios estudiantes inscritos.</li> </ul>"},{"location":"content/p1/#ejemplo-de-relaciones","title":"Ejemplo de Relaciones","text":"<p>Supongamos que tenemos dos entidades: Estudiante y Curso, y queremos modelar la relaci\u00f3n de inscripci\u00f3n (un estudiante puede inscribirse en varios cursos, y un curso puede tener varios estudiantes). Esto es una relaci\u00f3n muchos a muchos.</p> <p>Tabla Estudiante:</p> ID_Estudiante Nombre Apellido 1 Juan P\u00e9rez 2 Mar\u00eda G\u00f3mez <p>Tabla Curso:</p> ID_Curso Nombre_Curso 101 Matem\u00e1ticas 102 Historia <p>Para representar la relaci\u00f3n muchos a muchos, necesitamos una tabla intermedia llamada, por ejemplo, Inscripci\u00f3n:</p> <p>Tabla Inscripci\u00f3n:</p> ID_Estudiante ID_Curso Fecha_Inscripci\u00f3n 1 101 2025-01-10 1 102 2025-01-12 2 101 2025-01-11 <p>En esta tabla, cada fila representa una inscripci\u00f3n espec\u00edfica, conectando un estudiante con un curso.</p>"},{"location":"content/p1/#4-claves-primarias","title":"4. Claves Primarias","text":"<p>Una clave primaria es un atributo (o combinaci\u00f3n de atributos) que identifica de manera \u00fanica cada instancia de una entidad dentro de una tabla. La clave primaria garantiza que no haya duplicados en la tabla y que cada fila sea \u00fanica.</p>"},{"location":"content/p1/#propiedades-de-una-clave-primaria","title":"Propiedades de una Clave Primaria","text":"<ul> <li>Unicidad: No puede haber dos filas con el mismo valor en la clave primaria.</li> <li>No nulo: El valor de la clave primaria no puede ser nulo.</li> <li>Inmutabilidad: Idealmente, el valor de la clave primaria no deber\u00eda cambiar con el tiempo.</li> </ul>"},{"location":"content/p1/#ejemplo-de-clave-primaria","title":"Ejemplo de Clave Primaria","text":"<p>En la tabla Estudiante, el atributo ID_Estudiante es la clave primaria porque identifica de manera \u00fanica a cada estudiante.</p> <p>Tabla Estudiante:</p> ID_Estudiante (Clave Primaria) Nombre Apellido Fecha_Nacimiento 1 Juan P\u00e9rez 2000-05-15 2 Mar\u00eda G\u00f3mez 1999-08-22 <p>Si intent\u00e1ramos insertar otro estudiante con ID_Estudiante = 1, la base de datos lo rechazar\u00eda porque violar\u00eda la unicidad.</p> <p>En algunos casos, la clave primaria puede ser compuesta (formada por m\u00e1s de un atributo). Por ejemplo, en la tabla Inscripci\u00f3n, la clave primaria podr\u00eda ser la combinaci\u00f3n de ID_Estudiante y ID_Curso, ya que juntos identifican de manera \u00fanica cada inscripci\u00f3n.</p>"},{"location":"content/p1/#5-claves-foraneas","title":"5. Claves For\u00e1neas","text":"<p>Una clave for\u00e1nea es un atributo (o conjunto de atributos) en una tabla que establece una relaci\u00f3n con la clave primaria de otra tabla (o de la misma tabla en algunos casos). Las claves for\u00e1neas son esenciales para mantener la integridad referencial, asegurando que las relaciones entre tablas sean v\u00e1lidas.</p>"},{"location":"content/p1/#propiedades-de-una-clave-foranea","title":"Propiedades de una Clave For\u00e1nea","text":"<ul> <li>El valor de la clave for\u00e1nea debe coincidir con un valor existente en la clave primaria de la tabla referenciada o ser nulo (si la relaci\u00f3n es opcional).</li> <li>Se utiliza para conectar tablas y modelar relaciones.</li> </ul>"},{"location":"content/p1/#ejemplo-de-clave-foranea","title":"Ejemplo de Clave For\u00e1nea","text":"<p>En la tabla Inscripci\u00f3n, los atributos ID_Estudiante y ID_Curso son claves for\u00e1neas que hacen referencia a las claves primarias de las tablas Estudiante y Curso, respectivamente.</p> <p>Tabla Inscripci\u00f3n:</p> ID_Estudiante (Clave For\u00e1nea) ID_Curso (Clave For\u00e1nea) Fecha_Inscripci\u00f3n 1 101 2025-01-10 1 102 2025-01-12 2 101 2025-01-11 <ul> <li>ID_Estudiante debe coincidir con un valor de ID_Estudiante en la tabla Estudiante.</li> <li>ID_Curso debe coincidir con un valor de ID_Curso en la tabla Curso.</li> </ul> <p>Si intent\u00e1ramos insertar una inscripci\u00f3n con ID_Estudiante = 3 (que no existe en la tabla Estudiante), la base de datos lo rechazar\u00eda para mantener la integridad referencial.</p>"},{"location":"content/p1/#rol-de-las-claves-foraneas","title":"Rol de las Claves For\u00e1neas","text":"<ul> <li>Integridad referencial: Garantizan que las relaciones entre tablas sean consistentes.</li> <li>Navegaci\u00f3n entre tablas: Permiten consultar datos relacionados mediante operaciones como JOIN en SQL.</li> <li>Restricciones: Pueden configurarse para restringir o cascadear operaciones como eliminaci\u00f3n o actualizaci\u00f3n. Por ejemplo, si se elimina un estudiante, se pueden eliminar autom\u00e1ticamente sus inscripciones (ON DELETE CASCADE).</li> </ul>"},{"location":"content/p1/#ejemplo-completo-sistema-de-gestion-universitaria","title":"Ejemplo Completo: Sistema de Gesti\u00f3n Universitaria","text":"<p>Para consolidar todos los conceptos, consideremos un sistema de gesti\u00f3n universitaria con las siguientes entidades, atributos y relaciones:</p>"},{"location":"content/p1/#entidades-y-atributos","title":"Entidades y Atributos","text":"<ol> <li>Estudiante:</li> <li>Atributos: ID_Estudiante (clave primaria), Nombre, Apellido, Fecha_Nacimiento, Direcci\u00f3n (compuesta: Calle, Ciudad, C\u00f3digo Postal).</li> <li>Curso:</li> <li>Atributos: ID_Curso (clave primaria), Nombre_Curso, Cr\u00e9ditos.</li> <li>Departamento:</li> <li>Atributos: ID_Departamento (clave primaria), Nombre_Departamento.</li> <li>Inscripci\u00f3n (tabla intermedia para relaci\u00f3n muchos a muchos):</li> <li>Atributos: ID_Estudiante (clave for\u00e1nea), ID_Curso (clave for\u00e1nea), Fecha_Inscripci\u00f3n, Nota. Clave primaria: (ID_Estudiante, ID_Curso).</li> </ol>"},{"location":"content/p1/#relaciones","title":"Relaciones","text":"<ul> <li>Estudiante - Inscripci\u00f3n: Relaci\u00f3n uno a muchos (un estudiante puede tener muchas inscripciones, pero cada inscripci\u00f3n pertenece a un solo estudiante).</li> <li>Curso - Inscripci\u00f3n: Relaci\u00f3n uno a muchos (un curso puede tener muchas inscripciones, pero cada inscripci\u00f3n pertenece a un solo curso).</li> <li>Estudiante - Curso: Relaci\u00f3n muchos a muchos (a trav\u00e9s de la tabla Inscripci\u00f3n).</li> <li>Curso - Departamento: Relaci\u00f3n muchos a uno (muchos cursos pertenecen a un solo departamento).</li> </ul>"},{"location":"content/p1/#estructura-de-las-tablas","title":"Estructura de las Tablas","text":"<p>Tabla Estudiante:</p> ID_Estudiante Nombre Apellido Fecha_Nacimiento Direcci\u00f3n_Calle Direcci\u00f3n_Ciudad Direcci\u00f3n_C\u00f3digoPostal 1 Juan P\u00e9rez 2000-05-15 Av. Libertad 123 Bogot\u00e1 110111 2 Mar\u00eda G\u00f3mez 1999-08-22 Calle 45 # 12 Medell\u00edn 050012 <p>Tabla Curso:</p> ID_Curso Nombre_Curso Cr\u00e9ditos ID_Departamento (Clave For\u00e1nea) 101 Matem\u00e1ticas 3 1 102 Historia 4 2 <p>Tabla Departamento:</p> ID_Departamento Nombre_Departamento 1 Ciencias 2 Humanidades <p>Tabla Inscripci\u00f3n:</p> ID_Estudiante ID_Curso Fecha_Inscripci\u00f3n Nota 1 101 2025-01-10 4.0 1 102 2025-01-12 3.5 2 101 2025-01-11 4.5"},{"location":"content/p1/#la-normalizacion","title":"La normalizaci\u00f3n","text":"<p>Es un proceso fundamental en el dise\u00f1o de bases de datos relacionales que busca organizar los datos de manera eficiente, eliminando redundancias, evitando anomal\u00edas en las operaciones de inserci\u00f3n, actualizaci\u00f3n y eliminaci\u00f3n, y asegurando la integridad de los datos. Este proceso se basa en una serie de reglas o formas normales (NF) que establecen criterios para estructurar las tablas de una base de datos. </p>"},{"location":"content/p1/#1-primera-forma-normal-1nf","title":"1. Primera Forma Normal (1NF)","text":""},{"location":"content/p1/#concepto","title":"Concepto","text":"<p>La Primera Forma Normal (1NF) establece que una tabla debe cumplir con las siguientes reglas:</p> <ol> <li>Todos los atributos deben ser at\u00f3micos, es decir, no deben contener valores compuestos ni multivaluados. Cada celda de la tabla debe contener un solo valor indivisible.</li> <li>No debe haber grupos repetitivos o listas dentro de una misma fila.</li> <li>Cada fila debe ser \u00fanica, lo que generalmente se logra mediante una clave primaria.</li> <li>Los valores en cada columna deben ser del mismo tipo de datos.</li> </ol> <p>La 1NF asegura que la tabla sea representada como una estructura relacional pura, sin ambig\u00fcedades en los datos.</p>"},{"location":"content/p1/#ejemplo","title":"Ejemplo","text":"<p>Supongamos que tenemos una tabla no normalizada que almacena informaci\u00f3n sobre estudiantes y los cursos que toman:</p> <p>Tabla no normalizada: Estudiantes</p> ID_Estudiante Nombre Cursos 1 Ana Matem\u00e1ticas, F\u00edsica 2 Juan Qu\u00edmica, Biolog\u00eda, Historia 3 Mar\u00eda Matem\u00e1ticas, F\u00edsica, Qu\u00edmica <p>Problemas con esta tabla:</p> <ul> <li>El atributo Cursos contiene valores multivaluados (listas de cursos), lo que viola la regla de atomicidad.</li> <li>No se puede realizar consultas eficientes, como buscar todos los estudiantes que toman F\u00edsica, sin analizar cadenas de texto.</li> </ul> <p>Paso para alcanzar 1NF:</p> <ol> <li>Eliminar valores multivaluados: Cada curso debe tener su propia fila. Esto implica dividir la columna Cursos para que cada valor sea at\u00f3mico.</li> <li>Crear una clave primaria: Combinar ID_Estudiante con un identificador \u00fanico para cada curso o usar una nueva tabla si es necesario.</li> </ol> <p>Tabla en 1NF: Estudiantes_Cursos</p> ID_Estudiante Nombre Curso 1 Ana Matem\u00e1ticas 1 Ana F\u00edsica 2 Juan Qu\u00edmica 2 Juan Biolog\u00eda 2 Juan Historia 3 Mar\u00eda Matem\u00e1ticas 3 Mar\u00eda F\u00edsica 3 Mar\u00eda Qu\u00edmica <p>Cambios realizados:</p> <ul> <li>Cada fila ahora contiene un solo curso (valor at\u00f3mico).</li> <li>La tabla tiene una clave primaria impl\u00edcita (combinaci\u00f3n de ID_Estudiante y Curso) que asegura que no haya duplicados.</li> <li>Los valores en la columna Curso son del mismo tipo (nombres de cursos).</li> </ul> <p>Ventajas de 1NF:</p> <ul> <li>Facilita consultas como: \"Encuentra todos los estudiantes que toman F\u00edsica\".</li> <li>Evita problemas al procesar listas o valores compuestos.</li> </ul> <p>Desventajas: - Puede introducir redundancia (por ejemplo, el nombre \"Ana\" se repite). Esto se abordar\u00e1 en las siguientes formas normales.</p>"},{"location":"content/p1/#2-segunda-forma-normal-2nf","title":"2. Segunda Forma Normal (2NF)","text":""},{"location":"content/p1/#concepto_1","title":"Concepto","text":"<p>La Segunda Forma Normal (2NF) se aplica a tablas que ya est\u00e1n en 1NF y establece que:</p> <ol> <li>La tabla debe estar en 1NF.</li> <li>No debe haber dependencias funcionales parciales entre los atributos no clave y la clave primaria. Esto significa que cada atributo no clave debe depender completamente de la clave primaria, no solo de una parte de ella.</li> </ol> <p>Una dependencia funcional parcial ocurre cuando un atributo no clave depende solo de una parte de la clave primaria (en tablas con claves primarias compuestas).</p>"},{"location":"content/p1/#ejemplo_1","title":"Ejemplo","text":"<p>Usemos la tabla en 1NF anterior:</p> <p>Tabla: Estudiantes_Cursos</p> ID_Estudiante Nombre Curso 1 Ana Matem\u00e1ticas 1 Ana F\u00edsica 2 Juan Qu\u00edmica 2 Juan Biolog\u00eda 2 Juan Historia 3 Mar\u00eda Matem\u00e1ticas 3 Mar\u00eda F\u00edsica 3 Mar\u00eda Qu\u00edmica <p>An\u00e1lisis: - La clave primaria es la combinaci\u00f3n de ID_Estudiante y Curso, ya que esta combinaci\u00f3n identifica de manera \u00fanica cada fila. - Dependencias funcionales:</p> <ul> <li>ID_Estudiante \u2192 Nombre: El nombre del estudiante depende \u00fanicamente del ID_Estudiante, no del curso. Esto es una dependencia parcial porque Nombre no depende de toda la clave primaria (ID_Estudiante + Curso).</li> <li>ID_Estudiante, Curso \u2192 Curso: El curso en s\u00ed mismo est\u00e1 completamente determinado por la clave primaria (esto es trivial).</li> </ul> <p>Problema:</p> <ul> <li>El atributo Nombre no depende completamente de la clave primaria, lo que viola 2NF.</li> <li>Esto genera redundancia (el nombre \"Ana\" se repite para cada curso que toma) y posibles anomal\u00edas (si se actualiza el nombre de Ana en una fila pero no en otra, se crea inconsistencia).</li> </ul> <p>Paso para alcanzar 2NF:</p> <ol> <li>Identificar dependencias parciales: Separar los atributos que dependen solo de una parte de la clave primaria.</li> <li>Crear tablas separadas:</li> <li>Una tabla para la informaci\u00f3n del estudiante (ID_Estudiante, Nombre).</li> <li>Otra tabla para la relaci\u00f3n entre estudiantes y cursos (ID_Estudiante, Curso).</li> </ol> <p>Tablas en 2NF:</p> <p>Tabla 1: Estudiantes</p> ID_Estudiante Nombre 1 Ana 2 Juan 3 Mar\u00eda <p>Tabla 2: Cursos_Estudiantes</p> ID_Estudiante Curso 1 Matem\u00e1ticas 1 F\u00edsica 2 Qu\u00edmica 2 Biolog\u00eda 2 Historia 3 Matem\u00e1ticas 3 F\u00edsica 3 Qu\u00edmica <p>Cambios realizados:</p> <ul> <li>La tabla Estudiantes contiene informaci\u00f3n que depende \u00fanicamente de ID_Estudiante.</li> <li>La tabla Cursos_Estudiantes contiene la relaci\u00f3n entre estudiantes y cursos, con una clave primaria compuesta (ID_Estudiante, Curso).</li> <li>Se elimina la redundancia del atributo Nombre.</li> </ul> <p>Ventajas de 2NF:</p> <ul> <li>Reduce redundancia (el nombre de cada estudiante aparece solo una vez).</li> <li>Evita anomal\u00edas de actualizaci\u00f3n (cambiar el nombre de un estudiante se hace en una sola fila).</li> </ul> <p>Desventajas: - Puede haber dependencias entre atributos no clave que a\u00fan causen redundancia. Esto se aborda en 3NF.</p>"},{"location":"content/p1/#3-tercera-forma-normal-3nf","title":"3. Tercera Forma Normal (3NF)","text":""},{"location":"content/p1/#concepto_2","title":"Concepto","text":"<p>La Tercera Forma Normal (3NF) se aplica a tablas que ya est\u00e1n en 2NF y establece que:</p> <ol> <li>La tabla debe estar en 2NF.</li> <li>No debe haber dependencias transitivas entre los atributos no clave y la clave primaria. Esto significa que un atributo no clave no debe depender de otro atributo no clave.</li> </ol> <p>Una dependencia transitiva ocurre cuando un atributo no clave A depende de la clave primaria a trav\u00e9s de otro atributo no clave B (es decir, Clave Primaria \u2192 B \u2192 A).</p>"},{"location":"content/p1/#ejemplo_2","title":"Ejemplo","text":"<p>Supongamos que tenemos una tabla que almacena informaci\u00f3n sobre pedidos, con los siguientes atributos:</p> <p>Tabla: Pedidos</p> ID_Pedido ID_Cliente Nombre_Cliente Ciudad_Cliente Producto 1 101 Ana Madrid Laptop 2 102 Juan Barcelona Tel\u00e9fono 3 101 Ana Madrid Monitor <p>An\u00e1lisis:</p> <ul> <li>La tabla est\u00e1 en 1NF (valores at\u00f3micos, clave primaria ID_Pedido).</li> <li>La tabla est\u00e1 en 2NF (no hay dependencias parciales, ya que la clave primaria es simple: ID_Pedido).</li> <li>Dependencias funcionales:</li> <li>ID_Pedido \u2192 ID_Cliente, Nombre_Cliente, Ciudad_Cliente, Producto: La clave primaria determina todos los atributos.</li> <li>ID_Cliente \u2192 Nombre_Cliente, Ciudad_Cliente: El ID_Cliente determina el nombre y la ciudad del cliente. Esto es una dependencia transitiva porque Nombre_Cliente y Ciudad_Cliente dependen de ID_Cliente, que no es la clave primaria.</li> </ul> <p>Problema:</p> <ul> <li>Los atributos Nombre_Cliente y Ciudad_Cliente no dependen directamente de ID_Pedido, sino de ID_Cliente. Esto viola 3NF.</li> <li>Hay redundancia (el nombre \"Ana\" y la ciudad \"Madrid\" se repiten para el mismo cliente).</li> <li>Anomal\u00edas posibles: Si la ciudad de un cliente cambia, hay que actualizar todas las filas correspondientes.</li> </ul> <p>Paso para alcanzar 3NF:</p> <ol> <li>Identificar dependencias transitivas: Separar los atributos que dependen de otros atributos no clave.</li> <li>Crear tablas separadas:</li> <li>Una tabla para la informaci\u00f3n del cliente (ID_Cliente, Nombre_Cliente, Ciudad_Cliente).</li> <li>Otra tabla para los pedidos (ID_Pedido, ID_Cliente, Producto).</li> </ol> <p>Tablas en 3NF:</p> <p>Tabla 1: Clientes</p> ID_Cliente Nombre_Cliente Ciudad_Cliente 101 Ana Madrid 102 Juan Barcelona <p>Tabla 2: Pedidos</p> ID_Pedido ID_Cliente Producto 1 101 Laptop 2 102 Tel\u00e9fono 3 101 Monitor <p>Cambios realizados:</p> <ul> <li>La tabla Clientes contiene la informaci\u00f3n que depende de ID_Cliente.</li> <li>La tabla Pedidos contiene solo la informaci\u00f3n directamente relacionada con el pedido, con ID_Cliente como clave for\u00e1nea.</li> <li>Se elimina la redundancia de Nombre_Cliente y Ciudad_Cliente.</li> </ul> <p>Ventajas de 3NF:</p> <ul> <li>Elimina redundancias causadas por dependencias transitivas.</li> <li>Reduce anomal\u00edas en inserciones, actualizaciones y eliminaciones.</li> <li>Mejora la integridad de los datos al centralizar la informaci\u00f3n en tablas espec\u00edficas.</li> </ul> <p>Desventajas:</p> <ul> <li>Puede aumentar la complejidad de las consultas, ya que se requieren uniones (JOINs) para combinar informaci\u00f3n de m\u00faltiples tablas.</li> <li>Puede haber un impacto en el rendimiento en bases de datos muy grandes debido a las uniones.</li> </ul>"},{"location":"content/p1/#resumen-comparativo-de-1nf-2nf-y-3nf","title":"Resumen Comparativo de 1NF, 2NF y 3NF","text":"Forma Normal Requisito Principal Objetivo Ejemplo de Violaci\u00f3n 1NF Atributos at\u00f3micos, sin grupos repetitivos, clave primaria. Estructura relacional pura. Columna con listas (e.g., \"Matem\u00e1ticas, F\u00edsica\"). 2NF 1NF + sin dependencias funcionales parciales. Eliminar redundancia en claves compuestas. Atributo no clave (e.g., Nombre) depende de parte de la clave primaria. 3NF 2NF + sin dependencias transitivas. Eliminar redundancia entre atributos no clave. Atributo no clave (e.g., Ciudad_Cliente) depende de otro no clave (e.g., ID_Cliente)."},{"location":"content/p1/#ejemplo-completo","title":"Ejemplo Completo","text":"<p>Para consolidar los conceptos, consideremos un caso m\u00e1s complejo de una base de datos para una librer\u00eda:</p> <p>Tabla no normalizada: Ventas_Libros</p> ID_Venta ID_Cliente Nombre_Cliente Ciudad_Cliente Libros_Comprados Precio_Total 1 101 Ana Madrid Libro1, Libro2 50 2 102 Juan Barcelona Libro3 20 3 101 Ana Madrid Libro2, Libro4 45"},{"location":"content/p1/#paso-1-llevar-a-1nf","title":"Paso 1: Llevar a 1NF","text":"<p>Problemas:</p> <ul> <li>La columna Libros_Comprados contiene valores multivaluados.</li> <li>No hay garant\u00eda de unicidad sin una clave primaria clara.</li> </ul> <p>Tabla en 1NF:</p> ID_Venta ID_Cliente Nombre_Cliente Ciudad_Cliente Libro_Comprado Precio_Total 1 101 Ana Madrid Libro1 50 1 101 Ana Madrid Libro2 50 2 102 Juan Barcelona Libro3 20 3 101 Ana Madrid Libro2 45 3 101 Ana Madrid Libro4 45 <p>Clave primaria: (ID_Venta, Libro_Comprado).</p>"},{"location":"content/p1/#paso-2-llevar-a-2nf","title":"Paso 2: Llevar a 2NF","text":"<p>Problemas:</p> <ul> <li>Nombre_Cliente y Ciudad_Cliente dependen solo de ID_Cliente, no de la clave completa (ID_Venta, Libro_Comprado).</li> <li>Precio_Total depende de ID_Venta, no de Libro_Comprado.</li> </ul> <p>Tablas en 2NF:</p> <p>Tabla 1: Clientes</p> ID_Cliente Nombre_Cliente Ciudad_Cliente 101 Ana Madrid 102 Juan Barcelona <p>Tabla 2: Ventas</p> ID_Venta ID_Cliente Precio_Total 1 101 50 2 102 20 3 101 45 <p>Tabla 3: Detalles_Venta</p> ID_Venta Libro_Comprado 1 Libro1 1 Libro2 2 Libro3 3 Libro2 3 Libro4"},{"location":"content/p1/#paso-3-llevar-a-3nf","title":"Paso 3: Llevar a 3NF","text":"<p>An\u00e1lisis:</p> <ul> <li>En la tabla Clientes, Ciudad_Cliente podr\u00eda depender de un atributo no clave adicional, como un c\u00f3digo postal (si se incluyera). Supongamos que no hay m\u00e1s dependencias transitivas en este caso.</li> <li>Las tablas ya cumplen 3NF, ya que no hay dependencias transitivas adicionales.</li> </ul> <p>Resultado final:</p> <ul> <li>Clientes: Almacena informaci\u00f3n del cliente.</li> <li>Ventas: Almacena informaci\u00f3n general de la venta.</li> <li>Detalles_Venta: Almacena los libros comprados en cada venta.</li> </ul>"},{"location":"content/p1/#problema","title":"Problema","text":"<p>Tenemos una tabla no normalizada para una tienda de m\u00fasica que almacena informaci\u00f3n sobre ventas de discos. La tabla contiene redundancias, valores multivaluados y dependencias que causan anomal\u00edas en inserciones, actualizaciones y eliminaciones.</p> <p>Tabla no normalizada: Ventas_Discos | ID_Venta | ID_Cliente | Nombre_Cliente | Ciudad_Cliente | Discos_Comprados | Precio_Total | |----------|------------|----------------|----------------|------------------|--------------| | 1        | 101        | Ana            | Madrid         | Disco1, Disco2   | 40           | | 2        | 102        | Juan           | Barcelona      | Disco3           | 15           | | 3        | 101        | Ana            | Madrid         | Disco2, Disco4   | 35           |</p> <p>Problemas: - Valores multivaluados: La columna Discos_Comprados contiene listas (violaci\u00f3n de 1NF). - Redundancia: Nombre_Cliente y Ciudad_Cliente se repiten para el mismo cliente. - Dependencias parciales: Nombre_Cliente y Ciudad_Cliente dependen solo de ID_Cliente, no de toda la clave primaria (violaci\u00f3n de 2NF). - Dependencias transitivas: Ciudad_Cliente depende de ID_Cliente, no directamente de la clave primaria (violaci\u00f3n de 3NF).</p>"},{"location":"content/p1/#solucion","title":"Soluci\u00f3n","text":""},{"location":"content/p1/#paso-1-llevar-a-1nf_1","title":"Paso 1: Llevar a 1NF","text":"<p>Problema: La columna Discos_Comprados contiene valores multivaluados, y no hay una clave primaria clara.</p> <p>Soluci\u00f3n:  - Dividir Discos_Comprados para que cada disco tenga su propia fila. - Definir una clave primaria compuesta (ID_Venta, Disco_Comprado).</p> <p>Tabla en 1NF: Ventas_Discos | ID_Venta | ID_Cliente | Nombre_Cliente | Ciudad_Cliente | Disco_Compr \u201c\u2018ado | Precio_Total | |----------|------------|----------------|----------------|----------------|--------------| | 1        | 101        | Ana            | Madrid         | Disco1         | 40           | | 1        | 101        | Ana            | Madrid         | Disco2         | 40           | | 2        | 102        | Juan           | Barcelona      | Disco3         | 15           | | 3        | 101        | Ana            | Madrid         | Disco2         | 35           | | 3        | 101        | Ana            | Madrid         | Disco4         | 35           |</p>"},{"location":"content/p1/#paso-2-llevar-a-2nf_1","title":"Paso 2: Llevar a 2NF","text":"<p>Problema:  - Nombre_Cliente y Ciudad_Cliente dependen solo de ID_Cliente, no de la clave primaria completa (ID_Venta, Disco_Comprado). - Precio_Total depende solo de ID_Venta, no de Disco_Comprado.</p> <p>Soluci\u00f3n:  - Separar los atributos con dependencias parciales en tablas distintas:   - Una tabla para clientes (ID_Cliente, Nombre_Cliente, Ciudad_Cliente).   - Una tabla para ventas (ID_Venta, ID_Cliente, Precio_Total).   - Una tabla para detalles de venta (ID_Venta, Disco_Comprado).</p> <p>Tablas en 2NF:</p> <p>Tabla 1: Clientes | ID_Cliente | Nombre_Cliente | Ciudad_Cliente | |------------|----------------|----------------| | 101        | Ana            | Madrid         | | 102        | Juan           | Barcelona      |</p> <p>Tabla 2: Ventas | ID_Venta | ID_Cliente | Precio_Total | |----------|------------|--------------| | 1        | 101        | 40           | | 2        | 102        | 15           | | 3        | 101        | 35           |</p> <p>Tabla 3: Detalles_Venta | ID_Venta | Disco_Comprado | |----------|----------------| | 1        | Disco1         | | 1        | Disco2         | | 2        | Disco3         | | 3        | Disco2         | | 3        | Disco4         |</p>"},{"location":"content/p1/#paso-3-llevar-a-3nf_1","title":"Paso 3: Llevar a 3NF","text":"<p>Problema: En la tabla Clientes, Ciudad_Cliente depende de ID_Cliente, pero no hay dependencias transitivas adicionales en este caso (suponemos que Ciudad_Cliente no depende de otro atributo no clave, como un c\u00f3digo postal).</p> <p>Soluci\u00f3n:  - Verificar que no haya dependencias transitivas. Las tablas ya cumplen 3NF, ya que:   - Clientes: Todos los atributos (Nombre_Cliente, Ciudad_Cliente) dependen directamente de ID_Cliente.   - Ventas: Precio_Total depende de ID_Venta, y ID_Cliente es una clave for\u00e1nea.   - Detalles_Venta: Disco_Comprado depende de ID_Venta.</p> <p>Tablas en 3NF: Las mismas que en 2NF, ya que no se requieren m\u00e1s cambios.</p> <p>Tabla 1: Clientes | ID_Cliente | Nombre_Cliente | Ciudad_Cliente | |------------|----------------|----------------| | 101        | Ana            | Madrid         | | 102        | Juan           | Barcelona      |</p> <p>Tabla 2: Ventas | ID_Venta | ID_Cliente | Precio_Total | |----------|------------|--------------| | 1        | 101        | 40           | | 2        | 102        | 15           | | 3        | 101        | 35           |</p> <p>Tabla 3: Detalles_Venta | ID_Venta | Disco_Comprado | |----------|----------------| | 1        | Disco1         | | 1        | Disco2         | | 2        | Disco3         | | 3        | Disco2         | | 3        | Disco4         |</p>"},{"location":"content/p1/#resultado-final","title":"Resultado Final","text":"<ul> <li>Clientes: Almacena informaci\u00f3n \u00fanica de los clientes, eliminando redundancia.</li> <li>Ventas: Registra cada venta con su precio total y referencia al cliente.</li> <li>Detalles_Venta: Detalla los discos comprados en cada venta, permitiendo m\u00faltiples discos por venta.</li> <li>La base de datos est\u00e1 ahora en 3NF, libre de redundancias, dependencias parciales y transitivas, y optimizada para operaciones de inserci\u00f3n, actualizaci\u00f3n y eliminaci\u00f3n.</li> </ul>"},{"location":"content/p1/#ejercicio-normalizacion-de-una-tabla-de-vehiculos","title":"Ejercicio: Normalizaci\u00f3n de una Tabla de Veh\u00edculos","text":"<p>A continuaci\u00f3n, se presenta un ejercicio basado en el proceso de normalizaci\u00f3n descrito previamente. Deber\u00e1s aplicar las tres primeras formas normales (1NF, 2NF, 3NF) a una tabla no normalizada que contiene informaci\u00f3n sobre ventas de veh\u00edculos en una concesionaria. El objetivo es identificar los problemas en la tabla inicial y transformarla paso a paso hasta alcanzar la 3NF, siguiendo el formato del ejemplo anterior (mencionando solo el problema y la soluci\u00f3n en cada paso).</p>"},{"location":"content/p1/#problema-inicial","title":"Problema Inicial","text":"<p>La concesionaria tiene una tabla no normalizada para registrar las ventas de veh\u00edculos. La tabla contiene redundancias, valores multivaluados y dependencias que generan anomal\u00edas en las operaciones de la base de datos.</p> <p>Tabla no normalizada: Ventas_Vehiculos</p> ID_Venta ID_Cliente Nombre_Cliente Ciudad_Cliente Vehiculos_Comprados Precio_Total 1 201 Laura Lima Sedan, SUV 45000 2 202 Carlos Bogot\u00e1 Camioneta 30000 3 201 Laura Lima SUV, Hatchback 40000 <p>Problemas: - Valores multivaluados: La columna Vehiculos_Comprados contiene listas de veh\u00edculos (violaci\u00f3n de 1NF). - Redundancia: Nombre_Cliente y Ciudad_Cliente se repiten para el mismo cliente. - Dependencias parciales: Nombre_Cliente y Ciudad_Cliente dependen solo de ID_Cliente, no de toda la clave primaria. - Dependencias transitivas: Ciudad_Cliente depende de ID_Cliente, no directamente de la clave primaria.</p>"},{"location":"content/p1/#instrucciones-para-resolver","title":"Instrucciones para Resolver","text":"<p>Transforma la tabla Ventas_Vehiculos en 1NF, 2NF y 3NF, paso a paso. Para cada forma normal, identifica el problema espec\u00edfico y proporciona la soluci\u00f3n con las tablas resultantes. Sigue el formato del ejemplo anterior:</p> <ol> <li>Paso 1: Llevar a 1NF</li> <li>Identifica el problema (por ejemplo, valores multivaluados).</li> <li>Proporciona la tabla en 1NF.</li> <li>Paso 2: Llevar a 2NF</li> <li>Identifica el problema (por ejemplo, dependencias parciales).</li> <li>Proporciona las tablas en 2NF.</li> <li>Paso 3: Llevar a 3NF</li> <li>Identifica el problema (por ejemplo, dependencias transitivas).</li> <li>Proporciona las tablas en 3NF.</li> </ol>"},{"location":"content/p1s/","title":"P1s","text":""},{"location":"content/p1s/#ejercicio-normalizacion-de-una-tabla-de-vehiculos","title":"Ejercicio: Normalizaci\u00f3n de una Tabla de Veh\u00edculos","text":"<p>A continuaci\u00f3n, se presenta un ejercicio basado en el proceso de normalizaci\u00f3n descrito previamente. Deber\u00e1s aplicar las tres primeras formas normales (1NF, 2NF, 3NF) a una tabla no normalizada que contiene informaci\u00f3n sobre ventas de veh\u00edculos en una concesionaria. El objetivo es identificar los problemas en la tabla inicial y transformarla paso a paso hasta alcanzar la 3NF, siguiendo el formato del ejemplo anterior (mencionando solo el problema y la soluci\u00f3n en cada paso).</p>"},{"location":"content/p1s/#problema-inicial","title":"Problema Inicial","text":"<p>La concesionaria tiene una tabla no normalizada para registrar las ventas de veh\u00edculos. La tabla contiene redundancias, valores multivaluados y dependencias que generan anomal\u00edas en las operaciones de la base de datos.</p> <p>Tabla no normalizada: Ventas_Vehiculos | ID_Venta | ID_Cliente | Nombre_Cliente | Ciudad_Cliente | Vehiculos_Comprados | Precio_Total | |----------|------------|----------------|----------------|---------------------|--------------| | 1        | 201        | Laura          | Lima           | Sedan, SUV          | 45000        | | 2        | 202        | Carlos         | Bogot\u00e1         | Camioneta           | 30000        | | 3        | 201        | Laura          | Lima           | SUV, Hatchback      | 40000        |</p> <p>Problemas: - Valores multivaluados: La columna Vehiculos_Comprados contiene listas de veh\u00edculos (violaci\u00f3n de 1NF). - Redundancia: Nombre_Cliente y Ciudad_Cliente se repiten para el mismo cliente. - Dependencias parciales: Nombre_Cliente y Ciudad_Cliente dependen solo de ID_Cliente, no de toda la clave primaria. - Dependencias transitivas: Ciudad_Cliente depende de ID_Cliente, no directamente de la clave primaria.</p>"},{"location":"content/p1s/#instrucciones-para-resolver","title":"Instrucciones para Resolver","text":"<p>Transforma la tabla Ventas_Vehiculos en 1NF, 2NF y 3NF, paso a paso. Para cada forma normal, identifica el problema espec\u00edfico y proporciona la soluci\u00f3n con las tablas resultantes. Sigue el formato del ejemplo anterior:</p> <ol> <li>Paso 1: Llevar a 1NF</li> <li>Identifica el problema (por ejemplo, valores multivaluados).</li> <li>Proporciona la tabla en 1NF.</li> <li>Paso 2: Llevar a 2NF</li> <li>Identifica el problema (por ejemplo, dependencias parciales).</li> <li>Proporciona las tablas en 2NF.</li> <li>Paso 3: Llevar a 3NF</li> <li>Identifica el problema (por ejemplo, dependencias transitivas).</li> <li>Proporciona las tablas en 3NF.</li> </ol>"},{"location":"content/p1s/#solucion-esperada","title":"Soluci\u00f3n Esperada","text":"<p>A continuaci\u00f3n, se proporciona la soluci\u00f3n al ejercicio para que puedas verificar tu trabajo despu\u00e9s de intentarlo.</p>"},{"location":"content/p1s/#paso-1-llevar-a-1nf","title":"Paso 1: Llevar a 1NF","text":"<p>Problema:  - La columna Vehiculos_Comprados contiene valores multivaluados. - No hay una clave primaria clara que garantice unicidad.</p> <p>Soluci\u00f3n:  - Dividir Vehiculos_Comprados para que cada veh\u00edculo tenga su propia fila. - Definir una clave primaria compuesta (ID_Venta, Vehiculo_Comprado).</p> <p>Tabla en 1NF: Ventas_Vehiculos | ID_Venta | ID_Cliente | Nombre_Cliente | Ciudad_Cliente | Vehiculo_Comprado | Precio_Total | |----------|------------|----------------|----------------|-------------------|--------------| | 1        | 201        | Laura          | Lima           | Sedan             | 45000        | | 1        | 201        | Laura          | Lima           | SUV               | 45000        | | 2        | 202        | Carlos         | Bogot\u00e1         | Camioneta         | 30000        | | 3        | 201        | Laura          | Lima           | SUV               | 40000        | | 3        | 201        | Laura          | Lima           | Hatchback         | 40000        |</p>"},{"location":"content/p1s/#paso-2-llevar-a-2nf","title":"Paso 2: Llevar a 2NF","text":"<p>Problema:  - Nombre_Cliente y Ciudad_Cliente dependen solo de ID_Cliente, no de la clave primaria completa (ID_Venta, Vehiculo_Comprado). - Precio_Total depende solo de ID_Venta, no de Vehiculo_Comprado.</p> <p>Soluci\u00f3n:  - Separar los atributos con dependencias parciales en tablas distintas:   - Una tabla para clientes (ID_Cliente, Nombre_Cliente, Ciudad_Cliente).   - Una tabla para ventas (ID_Venta, ID_Cliente, Precio_Total).   - Una tabla para detalles de venta (ID_Venta, Vehiculo_Comprado).</p> <p>Tablas en 2NF:</p> <p>Tabla 1: Clientes | ID_Cliente | Nombre_Cliente | Ciudad_Cliente | |------------|----------------|----------------| | 201        | Laura          | Lima           | | 202        | Carlos         | Bogot\u00e1         |</p> <p>Tabla 2: Ventas | ID_Venta | ID_Cliente | Precio_Total | |----------|------------|--------------| | 1        | 201        | 45000        | | 2        | 202        | 30000        | | 3        | 201        | 40000        |</p> <p>Tabla 3: Detalles_Venta | ID_Venta | Vehiculo_Comprado | |----------|-------------------| | 1        | Sedan             | | 1        | SUV               | | 2        | Camioneta         | | 3        | SUV               | | 3        | Hatchback         |</p>"},{"location":"content/p1s/#paso-3-llevar-a-3nf","title":"Paso 3: Llevar a 3NF","text":"<p>Problema:  - En la tabla Clientes, Ciudad_Cliente depende de ID_Cliente, pero no hay dependencias transitivas adicionales (suponemos que Ciudad_Cliente no depende de otro atributo no clave, como un c\u00f3digo postal).</p> <p>Soluci\u00f3n:  - Verificar que no haya dependencias transitivas. Las tablas ya cumplen 3NF, ya que:   - Clientes: Todos los atributos (Nombre_Cliente, Ciudad_Cliente) dependen directamente de ID_Cliente.   - Ventas: Precio_Total depende de ID_Venta, y ID_Cliente es una clave for\u00e1nea.   - Detalles_Venta: Vehiculo_Comprado depende de ID_Venta.</p> <p>Tablas en 3NF: Las mismas que en 2NF.</p> <p>Tabla 1: Clientes | ID_Cliente | Nombre_Cliente | Ciudad_Cliente | |------------|----------------|----------------| | 201        | Laura          | Lima           | | 202        | Carlos         | Bogot\u00e1         |</p> <p>Tabla 2: Ventas | ID_Venta | ID_Cliente | Precio_Total | |----------|------------|--------------| | 1        | 201        | 45000        | | 2        | 202        | 30000        | | 3        | 201        | 40000        |</p> <p>Tabla 3: Detalles_Venta | ID_Venta | Vehiculo_Comprado | |----------|-------------------| | 1        | Sedan             | | 1        | SUV               | | 2        | Camioneta         | | 3        | SUV               | | 3        | Hatchback         |</p>"},{"location":"content/p1s/#resultado-final","title":"Resultado Final","text":"<p>La base de datos est\u00e1 ahora en 3NF, con las siguientes caracter\u00edsticas: - Clientes: Almacena informaci\u00f3n \u00fanica de los clientes, eliminando redundancia. - Ventas: Registra cada venta con su precio total y referencia al cliente. - Detalles_Venta: Detalla los veh\u00edculos comprados en cada venta, permitiendo m\u00faltiples veh\u00edculos por venta. - Se han eliminado redundancias, dependencias parciales y transitivas, optimizando la base de datos para operaciones de inserci\u00f3n, actualizaci\u00f3n y eliminaci\u00f3n.</p> <p>Tarea: Intenta resolver el ejercicio paso a paso antes de comparar con la soluci\u00f3n proporcionada. Si necesitas ayuda con alg\u00fan paso o quieres verificar tu soluci\u00f3n, \u00a1p\u00eddeme asistencia!</p>"},{"location":"content/p2/","title":"SQL: Comandos B\u00e1sicos y Tipos de Datos","text":""},{"location":"content/p2/#1-estructura-de-sql-ddl-dml-dcl-tcl","title":"1. Estructura de SQL: DDL, DML, DCL, TCL","text":"<p>SQL (Structured Query Language), o Lenguaje de Consulta Estructurado, es un lenguaje est\u00e1ndar dise\u00f1ado para gestionar, manipular y consultar datos en bases de datos relacionales. Permite a los usuarios interactuar con sistemas de gesti\u00f3n de bases de datos (SGBD) como MySQL, PostgreSQL, SQL Server, Oracle, SQLite, entre otros, para realizar operaciones como crear tablas, insertar datos, consultar informaci\u00f3n, actualizar registros, eliminar datos y administrar permisos.</p>"},{"location":"content/p2/#caracteristicas-principales-de-sql","title":"Caracter\u00edsticas principales de SQL","text":"<ol> <li>Estandarizado: SQL sigue est\u00e1ndares internacionales (como ANSI/ISO), aunque cada SGBD puede tener extensiones o variaciones propias.</li> <li>Declarativo: Los usuarios especifican qu\u00e9 quieren obtener o hacer, no c\u00f3mo hacerlo. El SGBD se encarga de optimizar la ejecuci\u00f3n.</li> <li>Vers\u00e1til: Sirve tanto para tareas simples (consultar una tabla) como para operaciones complejas (uniones de m\u00faltiples tablas, c\u00e1lculos estad\u00edsticos, etc.).</li> <li>No sensible a may\u00fasculas/min\u00fasculas: Los comandos como <code>SELECT</code> y <code>select</code> son equivalentes, aunque los datos en las tablas s\u00ed pueden ser sensibles a may\u00fasculas.</li> </ol>"},{"location":"content/p2/#11-ddl-data-definition-language-lenguaje-de-definicion-de-datos","title":"1.1. DDL (Data Definition Language - Lenguaje de Definici\u00f3n de Datos)","text":"<p>El DDL se utiliza para definir y modificar la estructura de los objetos en una base de datos, como tablas, esquemas, \u00edndices, etc. Los comandos DDL afectan el dise\u00f1o de la base de datos y suelen ser utilizados por administradores de bases de datos (DBAs).</p> <ul> <li>Prop\u00f3sito: Crear, modificar o eliminar estructuras de la base de datos.</li> <li>Caracter\u00edsticas:</li> <li>Los comandos DDL son autocommit, es decir, los cambios se aplican inmediatamente y no se pueden deshacer a menos que se use un mecanismo de respaldo.</li> <li> <p>No manipulan datos, solo la estructura.</p> </li> <li> <p>Comandos principales:</p> </li> <li>CREATE: Crea un nuevo objeto (tabla, base de datos, \u00edndice, etc.).</li> <li>ALTER: Modifica un objeto existente (agregar/modificar/eliminar columnas, restricciones, etc.).</li> <li>DROP: Elimina un objeto de la base de datos.</li> <li>TRUNCATE: Elimina todos los datos de una tabla, pero conserva su estructura.</li> <li> <p>RENAME: Cambia el nombre de un objeto.</p> </li> <li> <p>Ejemplo:   <pre><code>-- Crear una tabla\nCREATE TABLE empleados (\n    id INT PRIMARY KEY,\n    nombre VARCHAR(50),\n    salario DECIMAL(10,2)\n);\n\n-- Modificar la tabla para agregar una columna\nALTER TABLE empleados ADD fecha_contratacion DATE;\n\n-- Eliminar la tabla\nDROP TABLE empleados;\n</code></pre></p> </li> </ul>"},{"location":"content/p2/#12-dml-data-manipulation-language-lenguaje-de-manipulacion-de-datos","title":"1.2. DML (Data Manipulation Language - Lenguaje de Manipulaci\u00f3n de Datos)","text":"<p>El DML se utiliza para manipular los datos almacenados en las tablas, como insertar, actualizar, eliminar o consultar registros.</p> <ul> <li>Prop\u00f3sito: Gestionar el contenido de las tablas.</li> <li>Caracter\u00edsticas:</li> <li>Los comandos DML no modifican la estructura, solo los datos.</li> <li> <p>Los cambios pueden deshacerse si no se confirma la transacci\u00f3n (depende del sistema de gesti\u00f3n de bases de datos y TCL).</p> </li> <li> <p>Comandos principales:</p> </li> <li>INSERT: Agrega nuevos registros a una tabla.</li> <li>UPDATE: Modifica registros existentes.</li> <li>DELETE: Elimina registros de una tabla.</li> <li> <p>SELECT: Consulta datos de una o m\u00e1s tablas.</p> </li> <li> <p>Ejemplo:   <pre><code>-- Insertar un registro\nINSERT INTO empleados (id, nombre, salario) VALUES (1, 'Juan P\u00e9rez', 50000.00);\n\n-- Actualizar un registro\nUPDATE empleados SET salario = 55000.00 WHERE id = 1;\n\n-- Eliminar un registro\nDELETE FROM empleados WHERE id = 1;\n\n-- Consultar datos\nSELECT * FROM empleados;\n</code></pre></p> </li> </ul>"},{"location":"content/p2/#13-dcl-data-control-language-lenguaje-de-control-de-datos","title":"1.3. DCL (Data Control Language - Lenguaje de Control de Datos)","text":"<p>El DCL se utiliza para controlar el acceso y los permisos en la base de datos, garantizando la seguridad y la integridad.</p> <ul> <li>Prop\u00f3sito: Definir qui\u00e9n puede acceder a los datos y qu\u00e9 operaciones pueden realizar.</li> <li>Caracter\u00edsticas:</li> <li>Los comandos DCL son gestionados por administradores para establecer pol\u00edticas de seguridad.</li> <li> <p>A menudo, los cambios son permanentes a menos que se revoquen expl\u00edcitamente.</p> </li> <li> <p>Comandos principales:</p> </li> <li>GRANT: Otorga permisos a un usuario o rol (lectura, escritura, ejecuci\u00f3n, etc.).</li> <li>REVOKE: Revoca permisos previamente otorgados.</li> <li> <p>DENY (en algunos sistemas como SQL Server): Niega expl\u00edcitamente un permiso.</p> </li> <li> <p>Ejemplo:   <pre><code>-- Otorgar permiso de lectura a un usuario\nGRANT SELECT ON empleados TO usuario1;\n\n-- Revocar el permiso\nREVOKE SELECT ON empleados FROM usuario1;\n</code></pre></p> </li> </ul>"},{"location":"content/p2/#14-tcl-transaction-control-language-lenguaje-de-control-de-transacciones","title":"1.4. TCL (Transaction Control Language - Lenguaje de Control de Transacciones)","text":"<p>El TCL se utiliza para gestionar transacciones en la base de datos, asegurando la consistencia de los datos.</p> <ul> <li>Prop\u00f3sito: Controlar c\u00f3mo y cu\u00e1ndo los cambios en la base de datos se hacen permanentes.</li> <li>Caracter\u00edsticas:</li> <li>Los comandos TCL trabajan con transacciones, que son conjuntos de operaciones que se ejecutan como una unidad (todo o nada).</li> <li> <p>Son esenciales para mantener la integridad de los datos en operaciones complejas.</p> </li> <li> <p>Comandos principales:</p> </li> <li>COMMIT: Confirma una transacci\u00f3n, haciendo permanentes los cambios.</li> <li>ROLLBACK: Deshace los cambios realizados en una transacci\u00f3n.</li> <li>SAVEPOINT: Establece un punto intermedio dentro de una transacci\u00f3n para volver a \u00e9l si es necesario.</li> <li> <p>SET TRANSACTION: Configura propiedades de una transacci\u00f3n (como el nivel de aislamiento).</p> </li> <li> <p>Ejemplo:   <pre><code>-- Iniciar una transacci\u00f3n\nBEGIN TRANSACTION;\n\nINSERT INTO empleados (id, nombre, salario) VALUES (2, 'Ana G\u00f3mez', 60000.00);\nSAVEPOINT punto1;\n\nUPDATE empleados SET salario = 65000.00 WHERE id = 2;\n\n-- Deshacer hasta el punto1\nROLLBACK TO punto1;\n\n-- Confirmar la transacci\u00f3n\nCOMMIT;\n</code></pre></p> </li> </ul>"},{"location":"content/p2/#2-comandos-basicos-create-insert-select-update-delete","title":"2. Comandos B\u00e1sicos: CREATE, INSERT, SELECT, UPDATE, DELETE","text":"<p>A continuaci\u00f3n, se detalla cada uno de los comandos b\u00e1sicos mencionados, con explicaciones y ejemplos pr\u00e1cticos.</p>"},{"location":"content/p2/#21-create","title":"2.1. CREATE","text":"<ul> <li>Categor\u00eda: DDL</li> <li>Prop\u00f3sito: Crear nuevos objetos en la base de datos, como tablas, bases de datos, \u00edndices, vistas, etc.</li> <li>Sintaxis b\u00e1sica:   <pre><code>CREATE TABLE nombre_tabla (\n    columna1 tipo_dato [restricciones],\n    columna2 tipo_dato [restricciones],\n    ...\n);\n</code></pre></li> <li>Ejemplo:   <pre><code>CREATE TABLE clientes (\n    id_cliente INT PRIMARY KEY,\n    nombre VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    fecha_registro DATE DEFAULT CURRENT_DATE\n);\n</code></pre></li> <li>Explicaci\u00f3n:</li> <li>Se crea una tabla llamada <code>clientes</code>.</li> <li><code>id_cliente</code> es un entero y la clave primaria.</li> <li><code>nombre</code> es obligatorio (<code>NOT NULL</code>).</li> <li><code>email</code> debe ser \u00fanico (<code>UNIQUE</code>).</li> <li><code>fecha_registro</code> toma la fecha actual por defecto.</li> </ul>"},{"location":"content/p2/#22-insert","title":"2.2. INSERT","text":"<ul> <li>Categor\u00eda: DML</li> <li>Prop\u00f3sito: Insertar nuevos registros en una tabla.</li> <li>Sintaxis b\u00e1sica:   <pre><code>INSERT INTO nombre_tabla (columna1, columna2, ...) VALUES (valor1, valor2, ...);\n</code></pre></li> <li>Ejemplo:   <pre><code>INSERT INTO clientes (id_cliente, nombre, email) \nVALUES (1, 'Mar\u00eda L\u00f3pez', 'maria@correo.com');\n</code></pre></li> <li>Variaciones:</li> <li>Insertar m\u00faltiples registros:     <pre><code>INSERT INTO clientes (id_cliente, nombre, email) \nVALUES \n    (2, 'Pedro S\u00e1nchez', 'pedro@correo.com'),\n    (3, 'Laura Mart\u00ednez', 'laura@correo.com');\n</code></pre></li> <li>Insertar datos desde otra tabla:     <pre><code>INSERT INTO clientes_nuevos SELECT * FROM clientes WHERE fecha_registro &gt; '2025-01-01';\n</code></pre></li> </ul>"},{"location":"content/p2/#23-select","title":"2.3. SELECT","text":"<ul> <li>Categor\u00eda: DML</li> <li>Prop\u00f3sito: Consultar datos de una o m\u00e1s tablas.</li> <li>Sintaxis b\u00e1sica:   <pre><code>SELECT columna1, columna2, ... FROM nombre_tabla [WHERE condici\u00f3n];\n</code></pre></li> <li>Ejemplo:   <pre><code>SELECT nombre, email FROM clientes WHERE id_cliente = 1;\n</code></pre></li> <li>Variaciones:</li> <li>Seleccionar todo: <code>SELECT * FROM clientes;</code></li> <li>Usar funciones de agregaci\u00f3n:     <pre><code>SELECT COUNT(*) AS total_clientes FROM clientes;\n</code></pre></li> <li>Unir tablas (JOIN):     <pre><code>SELECT c.nombre, p.fecha_pedido \nFROM clientes c \nJOIN pedidos p ON c.id_cliente = p.id_cliente;\n</code></pre></li> </ul>"},{"location":"content/p2/#24-update","title":"2.4. UPDATE","text":"<ul> <li>Categor\u00eda: DML</li> <li>Prop\u00f3sito: Modificar registros existentes en una tabla.</li> <li>Sintaxis b\u00e1sica:   <pre><code>UPDATE nombre_tabla SET columna1 = valor1, columna2 = valor2, ... [WHERE condici\u00f3n];\n</code></pre></li> <li>Ejemplo:   <pre><code>UPDATE clientes SET email = 'maria.nuevo@correo.com' WHERE id_cliente = 1;\n</code></pre></li> <li>Precauci\u00f3n:</li> <li>Sin la cl\u00e1usula <code>WHERE</code>, se actualizan todos los registros.</li> <li>Ejemplo peligroso:     <pre><code>UPDATE clientes SET email = 'error@correo.com'; -- \u00a1Actualiza todos los emails!\n</code></pre></li> </ul>"},{"location":"content/p2/#25-delete","title":"2.5. DELETE","text":"<ul> <li>Categor\u00eda: DML</li> <li>Prop\u00f3sito: Eliminar registros de una tabla.</li> <li>Sintaxis b\u00e1sica:   <pre><code>DELETE FROM nombre_tabla [WHERE condici\u00f3n];\n</code></pre></li> <li>Ejemplo:   <pre><code>DELETE FROM clientes WHERE id_cliente = 1;\n</code></pre></li> <li>Precauci\u00f3n:</li> <li>Sin <code>WHERE</code>, se eliminan todos los registros.</li> <li>Ejemplo peligroso:     <pre><code>DELETE FROM clientes; -- \u00a1Elimina todos los clientes!\n</code></pre></li> </ul>"},{"location":"content/p2/#3-tipos-de-datos-en-sql","title":"3. Tipos de Datos en SQL","text":"<p>Los tipos de datos en SQL definen qu\u00e9 tipo de valores puede almacenar una columna. Cada sistema de gesti\u00f3n de bases de datos (SGBD) como MySQL, PostgreSQL, SQL Server u Oracle puede tener ligeras variaciones, pero los tipos principales son est\u00e1ndar. A continuaci\u00f3n, se describen los m\u00e1s comunes:</p>"},{"location":"content/p2/#31-tipos-de-datos-numericos","title":"3.1. Tipos de Datos Num\u00e9ricos","text":"<ul> <li>INT (INTEGER):</li> <li>Almacena n\u00fameros enteros (sin decimales).</li> <li>Rango t\u00edpico: -2,147,483,648 a 2,147,483,647 (4 bytes).</li> <li>Ejemplo: <code>id INT</code></li> <li> <p>Uso: Identificadores, contadores.</p> </li> <li> <p>BIGINT:</p> </li> <li>Enteros de mayor rango (8 bytes).</li> <li>Ejemplo: <code>id_transaccion BIGINT</code></li> <li> <p>Uso: Cuando se espera un volumen muy grande de datos.</p> </li> <li> <p>SMALLINT:</p> </li> <li>Enteros de menor rango (2 bytes).</li> <li>Ejemplo: <code>edad SMALLINT</code></li> <li> <p>Uso: Valores peque\u00f1os como edades o categor\u00edas.</p> </li> <li> <p>DECIMAL (NUMERIC):</p> </li> <li>N\u00fameros con decimales de precisi\u00f3n fija.</li> <li>Sintaxis: <code>DECIMAL(M,D)</code> donde <code>M</code> es el total de d\u00edgitos y <code>D</code> es el n\u00famero de decimales.</li> <li>Ejemplo: <code>salario DECIMAL(10,2)</code> (hasta 10 d\u00edgitos, 2 decimales, e.g., 12345678.90).</li> <li> <p>Uso: Valores monetarios, c\u00e1lculos financieros.</p> </li> <li> <p>FLOAT / DOUBLE:</p> </li> <li>N\u00fameros de punto flotante (aproximados).</li> <li>Ejemplo: <code>temperatura FLOAT</code></li> <li>Uso: Valores cient\u00edficos, medidas aproximadas.</li> </ul>"},{"location":"content/p2/#32-tipos-de-datos-de-cadena-texto","title":"3.2. Tipos de Datos de Cadena (Texto)","text":"<ul> <li>CHAR(n):</li> <li>Cadena de longitud fija (rellena con espacios si es necesario).</li> <li>Ejemplo: <code>codigo CHAR(5)</code> (siempre 5 caracteres, e.g., \"ABC  \").</li> <li> <p>Uso: C\u00f3digos de longitud fija.</p> </li> <li> <p>VARCHAR(n):</p> </li> <li>Cadena de longitud variable (m\u00e1ximo <code>n</code> caracteres).</li> <li>Ejemplo: <code>nombre VARCHAR(100)</code></li> <li> <p>Uso: Nombres, descripciones, correos electr\u00f3nicos.</p> </li> <li> <p>TEXT:</p> </li> <li>Texto de longitud variable y gran tama\u00f1o (sin l\u00edmite espec\u00edfico en algunos SGBD).</li> <li>Ejemplo: <code>descripcion TEXT</code></li> <li>Uso: Textos largos como comentarios o art\u00edculos.</li> </ul>"},{"location":"content/p2/#33-tipos-de-datos-de-fecha-y-hora","title":"3.3. Tipos de Datos de Fecha y Hora","text":"<ul> <li>DATE:</li> <li>Almacena fechas (a\u00f1o, mes, d\u00eda).</li> <li>Formato t\u00edpico: <code>YYYY-MM-DD</code>.</li> <li>Ejemplo: <code>fecha_nacimiento DATE</code></li> <li> <p>Uso: Fechas de nacimiento, registros.</p> </li> <li> <p>TIME:</p> </li> <li>Almacena horas (hora, minuto, segundo).</li> <li>Formato t\u00edpico: <code>HH:MM:SS</code>.</li> <li>Ejemplo: <code>hora_entrada TIME</code></li> <li> <p>Uso: Horarios.</p> </li> <li> <p>DATETIME / TIMESTAMP:</p> </li> <li>Almacena fecha y hora combinadas.</li> <li><code>DATETIME</code>: Generalmente usado para valores fijos.</li> <li><code>TIMESTAMP</code>: Puede actualizarse autom\u00e1ticamente (e.g., al modificar un registro).</li> <li>Ejemplo: <code>fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP</code></li> <li>Uso: Marcas de tiempo, auditor\u00eda.</li> </ul>"},{"location":"content/p2/#34-tipos-de-datos-booleanos","title":"3.4. Tipos de Datos Booleanos","text":"<ul> <li>BOOLEAN:</li> <li>Almacena valores <code>TRUE</code> o <code>FALSE</code> (en algunos SGBD, como MySQL, se usa <code>TINYINT(1)</code> con 0 y 1).</li> <li>Ejemplo: <code>activo BOOLEAN</code></li> <li>Uso: Indicadores de estado (activo/inactivo).</li> </ul>"},{"location":"content/p2/#35-tipos-de-datos-binarios","title":"3.5. Tipos de Datos Binarios","text":"<ul> <li>BINARY(n) / VARBINARY(n):</li> <li>Similar a <code>CHAR</code> y <code>VARCHAR</code>, pero para datos binarios (no texto).</li> <li>Ejemplo: <code>hash BINARY(32)</code></li> <li> <p>Uso: Almacenar hash o datos binarios.</p> </li> <li> <p>BLOB:</p> </li> <li>Objetos binarios grandes (im\u00e1genes, archivos, etc.).</li> <li>Ejemplo: <code>imagen BLOB</code></li> <li>Uso: Multimedia.</li> </ul>"},{"location":"content/p2/#36-otros-tipos-de-datos","title":"3.6. Otros Tipos de Datos","text":"<ul> <li>JSON:</li> <li>Almacena datos en formato JSON.</li> <li>Ejemplo: <code>configuracion JSON</code></li> <li> <p>Uso: Datos estructurados flexibles (en SGBD modernos como PostgreSQL o MySQL).</p> </li> <li> <p>ENUM:</p> </li> <li>Permite definir un conjunto de valores permitidos.</li> <li>Ejemplo: <code>estado ENUM('activo', 'inactivo', 'pendiente')</code></li> <li> <p>Uso: Categor\u00edas predefinidas.</p> </li> <li> <p>SET (en MySQL):</p> </li> <li>Similar a <code>ENUM</code>, pero permite m\u00faltiples valores.</li> <li>Ejemplo: <code>permisos SET('leer', 'escribir', 'ejecutar')</code></li> <li>Uso: Conjuntos de opciones.</li> </ul>"},{"location":"content/p2/#consideraciones-adicionales","title":"Consideraciones Adicionales","text":"<ol> <li>Compatibilidad entre SGBD:</li> <li>Los tipos de datos y comandos pueden variar ligeramente entre sistemas como MySQL, PostgreSQL, SQL Server, Oracle, etc. Por ejemplo:<ul> <li>MySQL usa <code>TINYINT(1)</code> para booleanos, mientras que PostgreSQL usa <code>BOOLEAN</code>.</li> <li><code>DATETIME</code> en SQL Server es diferente de <code>TIMESTAMP</code> en MySQL.</li> </ul> </li> <li> <p>Siempre consulta la documentaci\u00f3n del SGBD que est\u00e9s utilizando.</p> </li> <li> <p>Buenas Pr\u00e1cticas:</p> </li> <li>Usa tipos de datos adecuados para optimizar el almacenamiento y el rendimiento (e.g., no uses <code>VARCHAR(255)</code> para un c\u00f3digo de 5 caracteres).</li> <li>Define restricciones como <code>NOT NULL</code>, <code>PRIMARY KEY</code>, <code>FOREIGN KEY</code> para garantizar la integridad.</li> <li> <p>Normaliza las bases de datos para evitar redundancias.</p> </li> <li> <p>Ejemplo Completo:    <pre><code>-- Crear una base de datos y tabla\nCREATE DATABASE empresa;\nUSE empresa;\n\nCREATE TABLE departamentos (\n    id_depto INT PRIMARY KEY,\n    nombre VARCHAR(50) NOT NULL,\n    ubicacion VARCHAR(100)\n);\n\nCREATE TABLE empleados (\n    id_empleado INT PRIMARY KEY,\n    nombre VARCHAR(100) NOT NULL,\n    salario DECIMAL(10,2),\n    id_depto INT,\n    fecha_contratacion DATE,\n    activo BOOLEAN DEFAULT TRUE,\n    FOREIGN KEY (id_depto) REFERENCES departamentos(id_depto)\n);\n\n-- Insertar datos\nINSERT INTO departamentos (id_depto, nombre, ubicacion) \nVALUES (1, 'Ventas', 'Piso 3'), (2, 'TI', 'Piso 5');\n\nINSERT INTO empleados (id_empleado, nombre, salario, id_depto, fecha_contratacion) \nVALUES (1, 'Ana G\u00f3mez', 60000.00, 1, '2025-01-15');\n\n-- Consultar datos\nSELECT e.nombre, d.nombre AS departamento \nFROM empleados e \nJOIN departamentos d ON e.id_depto = d.id_depto;\n\n-- Actualizar datos\nUPDATE empleados SET salario = 65000.00 WHERE id_empleado = 1;\n\n-- Eliminar datos\nDELETE FROM empleados WHERE id_empleado = 1;\n</code></pre></p> </li> </ol>"},{"location":"content/p2/#actividad-creacion-de-una-base-de-datos-basica-para-una-escuela","title":"Actividad: Creaci\u00f3n de una Base de Datos B\u00e1sica para una Escuela","text":""},{"location":"content/p2/#enunciado","title":"Enunciado","text":"<p>Eres el administrador de una escuela que necesita organizar la informaci\u00f3n de sus estudiantes, profesores, cursos y aulas en una base de datos relacional. Tu tarea es dise\u00f1ar y crear una base de datos llamada <code>Escuela</code> con cuatro tablas: <code>estudiantes</code>, <code>profesores</code>, <code>cursos</code> y <code>aulas</code>. Cada tabla debe tener columnas con tipos de datos apropiados y una clave primaria para identificar registros \u00fanicos. Sigue los pasos a continuaci\u00f3n para completar la actividad.</p>"},{"location":"content/p2/#instrucciones-paso-a-paso","title":"Instrucciones Paso a Paso","text":"<ol> <li> <p>Crea la base de datos:</p> <ul> <li>Usa el comando <code>CREATE DATABASE</code> para crear una base de datos llamada <code>Escuela</code>.     </li> </ul> </li> <li> <p>Crea la tabla <code>estudiantes</code>:</p> <ul> <li>Debe tener las siguientes columnas:<ul> <li><code>id_estudiante</code>: Identificador \u00fanico del estudiante (entero, clave primaria).</li> <li><code>nombre</code>: Nombre del estudiante (texto, m\u00e1ximo 100 caracteres, obligatorio).</li> <li><code>fecha_nacimiento</code>: Fecha de nacimiento del estudiante (fecha, obligatorio).</li> </ul> </li> <li>Usa tipos de datos adecuados y agrega la restricci\u00f3n <code>PRIMARY KEY</code> para <code>id_estudiante</code>.</li> </ul> </li> <li> <p>Crea la tabla <code>profesores</code>:</p> <ul> <li>Debe tener las siguientes columnas:<ul> <li><code>id_profesor</code>: Identificador \u00fanico del profesor (entero, clave primaria).</li> <li><code>nombre</code>: Nombre del profesor (texto, m\u00e1ximo 100 caracteres, obligatorio).</li> <li><code>email</code>: Correo electr\u00f3nico del profesor (texto, m\u00e1ximo 100 caracteres, obligatorio).</li> </ul> </li> <li>Usa la restricci\u00f3n <code>PRIMARY KEY</code> para <code>id_profesor</code>.</li> </ul> </li> <li> <p>Crea la tabla <code>cursos</code>:</p> <ul> <li>Debe tener las siguientes columnas:<ul> <li><code>id_curso</code>: Identificador \u00fanico del curso (entero, clave primaria).</li> <li><code>nombre_curso</code>: Nombre del curso (texto, m\u00e1ximo 150 caracteres, obligatorio).</li> <li><code>creditos</code>: N\u00famero de cr\u00e9ditos del curso (entero, obligatorio).</li> </ul> </li> <li>Usa la restricci\u00f3n <code>PRIMARY KEY</code> para <code>id_curso</code>.</li> </ul> </li> <li> <p>Crea la tabla <code>aulas</code>:</p> <ul> <li>Debe tener las siguientes columnas:<ul> <li><code>id_aula</code>: Identificador \u00fanico del aula (entero, clave primaria).</li> <li><code>nombre_aula</code>: Nombre o c\u00f3digo del aula (texto, m\u00e1ximo 50 caracteres, obligatorio).</li> <li><code>capacidad</code>: Capacidad m\u00e1xima de estudiantes (entero, obligatorio).</li> </ul> </li> <li>Usa la restricci\u00f3n <code>PRIMARY KEY</code> para <code>id_aula</code>.</li> </ul> </li> <li> <p>Prueba y verifica tu base de datos:</p> <ul> <li>Escribe el c\u00f3digo SQL completo para crear la base de datos y las tablas.</li> <li>Opcional: Inserta un registro de ejemplo en cada tabla para verificar que las tablas funcionan correctamente (esto no es obligatorio, pero es \u00fatil para practicar el comando <code>INSERT</code>).</li> </ul> </li> </ol>"},{"location":"content/p2/#pistas","title":"Pistas","text":"<ul> <li>Usa tipos de datos como <code>INT</code>, <code>VARCHAR</code>, <code>DATE</code> y aseg\u00farate de que sean adecuados para cada columna.</li> <li>Aseg\u00farate de que cada tabla tenga una clave primaria definida con <code>PRIMARY KEY</code>.</li> <li>Si usas MySQL, PostgreSQL u otro SGBD, la sintaxis es generalmente la misma, pero verifica la documentaci\u00f3n para comandos como <code>DEFAULT</code> o tipos de datos espec\u00edficos.</li> </ul>"},{"location":"content/p2/#entrega","title":"Entrega","text":"<p>Escribe un archivo SQL que contenga todos los comandos necesarios para crear la base de datos y las tablas. Aseg\u00farate de incluir comentarios que expliquen cada paso.</p>"},{"location":"content/p2s/","title":"Actividad: Creaci\u00f3n de una Base de Datos B\u00e1sica para una Escuela","text":""},{"location":"content/p2s/#enunciado","title":"Enunciado","text":"<p>Eres el administrador de una escuela que necesita organizar la informaci\u00f3n de sus estudiantes, profesores, cursos y aulas en una base de datos relacional. Tu tarea es dise\u00f1ar y crear una base de datos llamada <code>Escuela</code> con cuatro tablas: <code>estudiantes</code>, <code>profesores</code>, <code>cursos</code> y <code>aulas</code>. Cada tabla debe tener columnas con tipos de datos apropiados y una clave primaria para identificar registros \u00fanicos. Sigue los pasos a continuaci\u00f3n para completar la actividad.</p>"},{"location":"content/p2s/#instrucciones-paso-a-paso","title":"Instrucciones Paso a Paso","text":"<ol> <li>Crea la base de datos:</li> <li>Usa el comando <code>CREATE DATABASE</code> para crear una base de datos llamada <code>Escuela</code>.</li> <li> <p>Selecciona la base de datos con <code>USE Escuela;</code> para trabajar en ella.</p> </li> <li> <p>Crea la tabla <code>estudiantes</code>:</p> </li> <li>Debe tener las siguientes columnas:<ul> <li><code>id_estudiante</code>: Identificador \u00fanico del estudiante (entero, clave primaria).</li> <li><code>nombre</code>: Nombre del estudiante (texto, m\u00e1ximo 100 caracteres, obligatorio).</li> <li><code>fecha_nacimiento</code>: Fecha de nacimiento del estudiante (fecha, obligatorio).</li> </ul> </li> <li> <p>Usa tipos de datos adecuados y agrega la restricci\u00f3n <code>PRIMARY KEY</code> para <code>id_estudiante</code>.</p> </li> <li> <p>Crea la tabla <code>profesores</code>:</p> </li> <li>Debe tener las siguientes columnas:<ul> <li><code>id_profesor</code>: Identificador \u00fanico del profesor (entero, clave primaria).</li> <li><code>nombre</code>: Nombre del profesor (texto, m\u00e1ximo 100 caracteres, obligatorio).</li> <li><code>email</code>: Correo electr\u00f3nico del profesor (texto, m\u00e1ximo 100 caracteres, obligatorio).</li> </ul> </li> <li> <p>Usa la restricci\u00f3n <code>PRIMARY KEY</code> para <code>id_profesor</code>.</p> </li> <li> <p>Crea la tabla <code>cursos</code>:</p> </li> <li>Debe tener las siguientes columnas:<ul> <li><code>id_curso</code>: Identificador \u00fanico del curso (entero, clave primaria).</li> <li><code>nombre_curso</code>: Nombre del curso (texto, m\u00e1ximo 150 caracteres, obligatorio).</li> <li><code>creditos</code>: N\u00famero de cr\u00e9ditos del curso (entero, obligatorio).</li> </ul> </li> <li> <p>Usa la restricci\u00f3n <code>PRIMARY KEY</code> para <code>id_curso</code>.</p> </li> <li> <p>Crea la tabla <code>aulas</code>:</p> </li> <li>Debe tener las siguientes columnas:<ul> <li><code>id_aula</code>: Identificador \u00fanico del aula (entero, clave primaria).</li> <li><code>nombre_aula</code>: Nombre o c\u00f3digo del aula (texto, m\u00e1ximo 50 caracteres, obligatorio).</li> <li><code>capacidad</code>: Capacidad m\u00e1xima de estudiantes (entero, obligatorio).</li> </ul> </li> <li> <p>Usa la restricci\u00f3n <code>PRIMARY KEY</code> para <code>id_aula</code>.</p> </li> <li> <p>Prueba y verifica tu base de datos:</p> </li> <li>Escribe el c\u00f3digo SQL completo para crear la base de datos y las tablas.</li> <li>Opcional: Inserta un registro de ejemplo en cada tabla para verificar que las tablas funcionan correctamente (esto no es obligatorio, pero es \u00fatil para practicar el comando <code>INSERT</code>).</li> </ol>"},{"location":"content/p2s/#pistas","title":"Pistas","text":"<ul> <li>Usa tipos de datos como <code>INT</code>, <code>VARCHAR</code>, <code>DATE</code> y aseg\u00farate de que sean adecuados para cada columna.</li> <li>Aseg\u00farate de que cada tabla tenga una clave primaria definida con <code>PRIMARY KEY</code>.</li> <li>Si usas MySQL, PostgreSQL u otro SGBD, la sintaxis es generalmente la misma, pero verifica la documentaci\u00f3n para comandos como <code>DEFAULT</code> o tipos de datos espec\u00edficos.</li> </ul>"},{"location":"content/p2s/#entrega","title":"Entrega","text":"<p>Escribe un archivo SQL que contenga todos los comandos necesarios para crear la base de datos y las tablas. Aseg\u00farate de incluir comentarios que expliquen cada paso.</p>"},{"location":"content/p2s/#solucion-de-ejemplo","title":"Soluci\u00f3n de Ejemplo","text":"<p>A continuaci\u00f3n, se proporciona la soluci\u00f3n actualizada en un archivo SQL, envuelto en un artefacto con el mismo <code>artifact_id</code> del artefacto anterior (ya que es una actualizaci\u00f3n de la actividad), pero con un nuevo t\u00edtulo para reflejar el cambio de tema.</p> <pre><code>-- Paso 1: Crear la base de datos\nCREATE DATABASE Escuela;\n\n-- Seleccionar la base de datos para trabajar en ella\nUSE Escuela;\n\n-- Paso 2: Crear la tabla 'estudiantes'\nCREATE TABLE estudiantes (\n    id_estudiante INT PRIMARY KEY,\n    nombre VARCHAR(100) NOT NULL,\n    fecha_nacimiento DATE NOT NULL\n);\n\n-- Paso 3: Crear la tabla 'profesores'\nCREATE TABLE profesores (\n    id_profesor INT PRIMARY KEY,\n    nombre VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL\n);\n\n-- Paso 4: Crear la tabla 'cursos'\nCREATE TABLE cursos (\n    id_curso INT PRIMARY KEY,\n    nombre_curso VARCHAR(150) NOT NULL,\n    creditos INT NOT NULL\n);\n\n-- Paso 5: Crear la tabla 'aulas'\nCREATE TABLE aulas (\n    id_aula INT PRIMARY KEY,\n    nombre_aula VARCHAR(50) NOT NULL,\n    capacidad INT NOT NULL\n);\n\n-- Opcional: Insertar datos de ejemplo para probar las tablas\nINSERT INTO estudiantes (id_estudiante, nombre, fecha_nacimiento) \nVALUES (1, 'Mar\u00eda L\u00f3pez', '2005-03-15');\n\nINSERT INTO profesores (id_profesor, nombre, email) \nVALUES (1, 'Carlos G\u00f3mez', 'carlos.gomez@escuela.com');\n\nINSERT INTO cursos (id_curso, nombre_curso, creditos) \nVALUES (1, 'Matem\u00e1ticas B\u00e1sicas', 4);\n\nINSERT INTO aulas (id_aula, nombre_aula, capacidad) \nVALUES (1, 'Aula 101', 30);\n</code></pre>"},{"location":"content/p2s/#guia-para-los-estudiantes","title":"Gu\u00eda para los Estudiantes","text":"<ol> <li>Ejecuta el c\u00f3digo:</li> <li>Usa un SGBD como MySQL, PostgreSQL o SQL Server.</li> <li>Copia el c\u00f3digo SQL en una herramienta como MySQL Workbench, pgAdmin o SQL Server Management Studio.</li> <li> <p>Ejecuta los comandos en orden para crear la base de datos y las tablas.</p> </li> <li> <p>Verifica las tablas:</p> </li> <li>Usa <code>DESCRIBE nombre_tabla;</code> (en MySQL) o <code>\\d nombre_tabla</code> (en PostgreSQL) para verificar la estructura de cada tabla.</li> <li> <p>Si insertaste datos de ejemplo, ejecuta <code>SELECT * FROM nombre_tabla;</code> para ver los registros.</p> </li> <li> <p>Errores comunes y c\u00f3mo solucionarlos:</p> </li> <li>Falta de <code>NOT NULL</code>: Aseg\u00farate de que las columnas indicadas como obligatorias tengan esta restricci\u00f3n.</li> <li>Tipos de datos incorrectos: Usa <code>DATE</code> para fechas, <code>VARCHAR</code> para textos y <code>INT</code> para n\u00fameros enteros.</li> <li> <p>Olvidar la clave primaria: Cada tabla debe tener una columna con <code>PRIMARY KEY</code>.</p> </li> <li> <p>Ampliaci\u00f3n (opcional):</p> </li> <li>Agrega m\u00e1s columnas, como <code>telefono</code> en <code>profesores</code> o <code>ubicacion</code> en <code>aulas</code>.</li> <li>Practica comandos DML como <code>INSERT</code>, <code>UPDATE</code> o <code>SELECT</code> con las tablas creadas.</li> <li>Crea una tabla adicional, como <code>asistencias</code>, con columnas simples.</li> </ol>"},{"location":"content/p2s/#notas-para-el-profesor","title":"Notas para el Profesor","text":"<ul> <li>Nivel: Principiante (introducci\u00f3n a SQL y bases de datos).</li> <li>Duraci\u00f3n estimada: 25-35 minutos, dependiendo de si se incluyen datos de ejemplo.</li> <li>Evaluaci\u00f3n:</li> <li>Verifica que el c\u00f3digo SQL sea correcto y funcional.</li> <li>Eval\u00faa el uso adecuado de tipos de datos, claves primarias y restricciones <code>NOT NULL</code>.</li> <li>Considera puntos extra por comentarios claros, datos de ejemplo o ampliaciones.</li> <li>Variaciones:</li> <li>Cambia el tema (e.g., hospital, tienda, biblioteca).</li> <li>Pide a los estudiantes que agreguen m\u00e1s tablas o columnas.</li> <li>Introduce restricciones adicionales como <code>DEFAULT</code> o <code>UNIQUE</code> para un desaf\u00edo extra.</li> </ul> <p>Esta actividad mantiene la simplicidad al evitar claves for\u00e1neas, pero ampl\u00eda la pr\u00e1ctica con cuatro tablas y un tema nuevo (escuela). Si necesitas m\u00e1s modificaciones, actividades adicionales o un enfoque diferente, h\u00e1zmelo saber. \ud83d\ude0a</p>"},{"location":"content/p3/","title":"Consultas en SQL","text":""},{"location":"content/p3/#1-operadores-en-sql","title":"1. Operadores en SQL","text":"<p>Los operadores en SQL se utilizan principalmente en la cl\u00e1usula WHERE para filtrar filas de una tabla seg\u00fan condiciones espec\u00edficas. A continuaci\u00f3n, se detalla cada uno de los operadores solicitados.</p>"},{"location":"content/p3/#11-where","title":"1.1. WHERE","text":"<p>La cl\u00e1usula WHERE se usa para filtrar registros en una consulta SQL. Solo las filas que cumplen la condici\u00f3n especificada en WHERE se incluyen en el resultado.</p> <p>Sintaxis b\u00e1sica: <pre><code>SELECT columnas FROM tabla WHERE condici\u00f3n;\n</code></pre></p> <p>Ejemplo: Supongamos que tenemos una tabla <code>libros</code> con las columnas: <code>id</code>, <code>titulo</code>, <code>autor</code>, <code>precio</code>, <code>publicacion</code> (a\u00f1o de publicaci\u00f3n).</p> <p><pre><code>SELECT titulo, autor, precio\nFROM libros\nWHERE precio &gt; 20;\n</code></pre> Explicaci\u00f3n: Esta consulta devuelve todos los libros cuyo precio sea mayor a 20. Por ejemplo, si un libro cuesta 15, no aparecer\u00e1 en el resultado.</p> <p>Resultado esperado:</p> titulo autor precio \"Cien a\u00f1os de soledad\" Gabriel Garc\u00eda 25.99 \"1984\" George Orwell 22.50"},{"location":"content/p3/#12-and","title":"1.2. AND","text":"<p>El operador AND combina m\u00faltiples condiciones en una cl\u00e1usula WHERE, y todas deben ser verdaderas para que una fila se incluya en el resultado.</p> <p>Sintaxis: <pre><code>SELECT columnas FROM tabla WHERE condici\u00f3n1 AND condici\u00f3n2;\n</code></pre></p> <p>Ejemplo: <pre><code>SELECT titulo, autor, precio\nFROM libros\nWHERE precio &gt; 20 AND publicacion &gt;= 2000;\n</code></pre> Explicaci\u00f3n: Devuelve los libros con precio mayor a 20 y publicados a partir del a\u00f1o 2000. Ambas condiciones deben cumplirse.</p> <p>Resultado esperado:</p> titulo autor precio \"El c\u00f3digo Da Vinci\" Dan Brown 24.99"},{"location":"content/p3/#13-or","title":"1.3. OR","text":"<p>El operador OR tambi\u00e9n combina condiciones, pero basta con que al menos una sea verdadera para que la fila se incluya.</p> <p>Sintaxis: <pre><code>SELECT columnas FROM tabla WHERE condici\u00f3n1 OR condici\u00f3n2;\n</code></pre></p> <p>Ejemplo: <pre><code>SELECT titulo, autor, precio\nFROM libros\nWHERE autor = 'Gabriel Garc\u00eda' OR autor = 'George Orwell';\n</code></pre> Explicaci\u00f3n: Devuelve los libros escritos por Gabriel Garc\u00eda o George Orwell, independientemente de si cumplen ambas condiciones.</p> <p>Resultado esperado:</p> titulo autor precio \"Cien a\u00f1os de soledad\" Gabriel Garc\u00eda 25.99 \"1984\" George Orwell 22.50"},{"location":"content/p3/#14-like","title":"1.4. LIKE","text":"<p>El operador LIKE se usa para buscar patrones en cadenas de texto. Se combina con caracteres comod\u00edn: - <code>%</code>: Representa cero o m\u00e1s caracteres. - <code>_</code>: Representa un solo car\u00e1cter.</p> <p>Sintaxis: <pre><code>SELECT columnas FROM tabla WHERE columna LIKE patr\u00f3n;\n</code></pre></p> <p>Ejemplo 1 (con %): <pre><code>SELECT titulo, autor\nFROM libros\nWHERE titulo LIKE 'El%';\n</code></pre> Explicaci\u00f3n: Devuelve los libros cuyo t\u00edtulo comienza con \"El\".</p> <p>Resultado esperado:</p> titulo autor \"El c\u00f3digo Da Vinci\" Dan Brown \"El se\u00f1or de los anillos\" J.R.R. Tolkien <p>Ejemplo 2 (con _): <pre><code>SELECT titulo, autor\nFROM libros\nWHERE autor LIKE 'G_rge Orwell';\n</code></pre> Explicaci\u00f3n: Busca autores cuyo nombre tenga exactamente el patr\u00f3n \"G_rge Orwell\" (como \"George Orwell\").</p> <p>Resultado esperado:</p> titulo autor \"1984\" George Orwell"},{"location":"content/p3/#15-between","title":"1.5. BETWEEN","text":"<p>El operador BETWEEN filtra valores dentro de un rango inclusivo (num\u00e9rico, de fechas, etc.).</p> <p>Sintaxis: <pre><code>SELECT columnas FROM tabla WHERE columna BETWEEN valor1 AND valor2;\n</code></pre></p> <p>Ejemplo: <pre><code>SELECT titulo, precio\nFROM libros\nWHERE precio BETWEEN 15 AND 25;\n</code></pre> Explicaci\u00f3n: Devuelve los libros cuyo precio est\u00e1 entre 15 y 25 (inclusive).</p> <p>Resultado esperado:</p> titulo precio \"1984\" 22.50 \"El hobbit\" 19.99 <p>Nota: BETWEEN es equivalente a <code>columna &gt;= valor1 AND columna &lt;= valor2</code>.</p>"},{"location":"content/p3/#2-funciones-de-agregacion","title":"2. Funciones de Agregaci\u00f3n","text":"<p>Las funciones de agregaci\u00f3n operan sobre un conjunto de filas y devuelven un \u00fanico valor. Se usan com\u00fanmente con GROUP BY o en consultas generales.</p>"},{"location":"content/p3/#21-count","title":"2.1. COUNT","text":"<p>La funci\u00f3n COUNT cuenta el n\u00famero de filas que cumplen una condici\u00f3n o el n\u00famero total de filas no nulas.</p> <p>Sintaxis: <pre><code>SELECT COUNT(columna) FROM tabla WHERE condici\u00f3n;\n</code></pre></p> <p>Ejemplo: <pre><code>SELECT COUNT(*) AS total_libros\nFROM libros\nWHERE publicacion &gt;= 2000;\n</code></pre> Explicaci\u00f3n: Cuenta cu\u00e1ntos libros fueron publicados a partir del a\u00f1o 2000.</p> <p>Resultado esperado:</p> total_libros 10"},{"location":"content/p3/#22-sum","title":"2.2. SUM","text":"<p>La funci\u00f3n SUM suma los valores de una columna num\u00e9rica.</p> <p>Sintaxis: <pre><code>SELECT SUM(columna) FROM tabla WHERE condici\u00f3n;\n</code></pre></p> <p>Ejemplo: <pre><code>SELECT SUM(precio) AS total_ventas\nFROM libros\nWHERE autor = 'Dan Brown';\n</code></pre> Explicaci\u00f3n: Calcula la suma de los precios de todos los libros escritos por Dan Brown.</p> <p>Resultado esperado:</p> total_ventas 49.98"},{"location":"content/p3/#23-avg","title":"2.3. AVG","text":"<p>La funci\u00f3n AVG calcula el promedio de los valores de una columna num\u00e9rica.</p> <p>Sintaxis: <pre><code>SELECT AVG(columna) FROM tabla WHERE condici\u00f3n;\n</code></pre></p> <p>Ejemplo: <pre><code>SELECT AVG(precio) AS precio_promedio\nFROM libros\nWHERE publicacion &gt;= 2000;\n</code></pre> Explicaci\u00f3n: Calcula el precio promedio de los libros publicados desde el a\u00f1o 2000.</p> <p>Resultado esperado:</p> precio_promedio 22.45"},{"location":"content/p3/#24-max","title":"2.4. MAX","text":"<p>La funci\u00f3n MAX devuelve el valor m\u00e1ximo de una columna.</p> <p>Sintaxis: <pre><code>SELECT MAX(columna) FROM tabla WHERE condici\u00f3n;\n</code></pre></p> <p>Ejemplo: <pre><code>SELECT MAX(precio) AS precio_maximo\nFROM libros;\n</code></pre> Explicaci\u00f3n: Encuentra el precio m\u00e1s alto de todos los libros.</p> <p>Resultado esperado:</p> precio_maximo 29.99"},{"location":"content/p3/#25-min","title":"2.5. MIN","text":"<p>La funci\u00f3n MIN devuelve el valor m\u00ednimo de una columna.</p> <p>Sintaxis: <pre><code>SELECT MIN(columna) FROM tabla WHERE condici\u00f3n;\n</code></pre></p> <p>Ejemplo: <pre><code>SELECT MIN(precio) AS precio_minimo\nFROM libros;\n</code></pre> Explicaci\u00f3n: Encuentra el precio m\u00e1s bajo de todos los libros.</p> <p>Resultado esperado:</p> precio_minimo 9.99"},{"location":"content/p3/#3-ordenacion-y-agrupacion","title":"3. Ordenaci\u00f3n y Agrupaci\u00f3n","text":""},{"location":"content/p3/#31-order-by","title":"3.1. ORDER BY","text":"<p>La cl\u00e1usula ORDER BY ordena los resultados de una consulta seg\u00fan una o m\u00e1s columnas, en orden ascendente (ASC, por defecto) o descendente (DESC).</p> <p>Sintaxis: <pre><code>SELECT columnas FROM tabla ORDER BY columna1 [ASC|DESC], columna2 [ASC|DESC];\n</code></pre></p> <p>Ejemplo: <pre><code>SELECT titulo, precio\nFROM libros\nORDER BY precio DESC, titulo ASC;\n</code></pre> Explicaci\u00f3n: Ordena los libros por precio de mayor a menor; si hay precios iguales, ordena los t\u00edtulos alfab\u00e9ticamente.</p> <p>Resultado esperado:</p> titulo precio \"Cien a\u00f1os de soledad\" 25.99 \"1984\" 22.50 \"El hobbit\" 19.99"},{"location":"content/p3/#32-group-by","title":"3.2. GROUP BY","text":"<p>La cl\u00e1usula GROUP BY agrupa filas que tienen el mismo valor en una columna espec\u00edfica y suele usarse con funciones de agregaci\u00f3n.</p> <p>Sintaxis: <pre><code>SELECT columna_agrupada, funci\u00f3n_agregaci\u00f3n(columna)\nFROM tabla\nGROUP BY columna_agrupada;\n</code></pre></p> <p>Ejemplo: <pre><code>SELECT autor, COUNT(*) AS total_libros, AVG(precio) AS precio_promedio\nFROM libros\nGROUP BY autor;\n</code></pre> Explicaci\u00f3n: Agrupa los libros por autor, cuenta cu\u00e1ntos libros tiene cada autor y calcula el precio promedio de sus libros.</p> <p>Resultado esperado:</p> autor total_libros precio_promedio Gabriel Garc\u00eda 2 24.99 George Orwell 3 20.50 Dan Brown 1 24.99"},{"location":"content/p3/#33-having","title":"3.3. HAVING","text":"<p>La cl\u00e1usula HAVING filtra los resultados de un GROUP BY seg\u00fan una condici\u00f3n aplicada a las funciones de agregaci\u00f3n. Es similar a WHERE, pero se usa para grupos, no para filas individuales.</p> <p>Sintaxis: <pre><code>SELECT columna_agrupada, funci\u00f3n_agregaci\u00f3n(columna)\nFROM tabla\nGROUP BY columna_agrupada\nHAVING condici\u00f3n;\n</code></pre></p> <p>Ejemplo: <pre><code>SELECT autor, COUNT(*) AS total_libros\nFROM libros\nGROUP BY autor\nHAVING COUNT(*) &gt; 1;\n</code></pre> Explicaci\u00f3n: Muestra los autores que han escrito m\u00e1s de un libro.</p> <p>Resultado esperado:</p> autor total_libros Gabriel Garc\u00eda 2 George Orwell 3"},{"location":"content/p3/#ejemplo-completo-integrado","title":"Ejemplo Completo Integrado","text":"<p>Para ilustrar c\u00f3mo se combinan estos conceptos, veamos una consulta compleja que usa varios operadores, funciones de agregaci\u00f3n, ordenaci\u00f3n y agrupaci\u00f3n.</p> <p>Consulta: <pre><code>SELECT autor, COUNT(*) AS total_libros, AVG(precio) AS precio_promedio\nFROM libros\nWHERE publicacion BETWEEN 1980 AND 2020\nAND (titulo LIKE 'El%' OR autor LIKE '%Orwell')\nGROUP BY autor\nHAVING COUNT(*) &gt;= 2\nORDER BY precio_promedio DESC;\n</code></pre></p> <p>Explicaci\u00f3n paso a paso:</p> <ol> <li>WHERE: Filtra los libros publicados entre 1980 y 2020, y cuyos t\u00edtulos comiencen con \"El\" o cuyo autor contenga \"Orwell\".</li> <li>GROUP BY: Agrupa los resultados por autor.</li> <li>Funciones de agregaci\u00f3n: Calcula el n\u00famero total de libros (<code>COUNT</code>) y el precio promedio (<code>AVG</code>) por autor.</li> <li>HAVING: Solo muestra los autores con 2 o m\u00e1s libros.</li> <li>ORDER BY: Ordena los resultados por precio promedio en orden descendente.</li> </ol> <p>Resultado esperado:</p> autor total_libros precio_promedio Gabriel Garc\u00eda 2 24.99 George Orwell 2 21.25"},{"location":"content/p3/#notas-adicionales","title":"Notas Adicionales","text":"<ul> <li>Orden de ejecuci\u00f3n en SQL: Las cl\u00e1usulas se ejecutan en este orden: FROM, WHERE, GROUP BY, HAVING, SELECT, ORDER BY. Esto es importante para entender c\u00f3mo se aplican los filtros y agrupaciones.</li> <li>Uso de alias: Puedes usar alias (con <code>AS</code>) para renombrar columnas en el resultado, como se vio en los ejemplos (<code>total_libros</code>, <code>precio_promedio</code>).</li> <li>Optimizaci\u00f3n: Para grandes bases de datos, aseg\u00farate de que las columnas usadas en WHERE, GROUP BY y ORDER BY tengan \u00edndices para mejorar el rendimiento.</li> </ul>"},{"location":"content/p3/#ejemplo-practico","title":"Ejemplo pr\u00e1ctico","text":"<pre><code>-- Creando la tabla libros\nCREATE TABLE libros (\n    id INT PRIMARY KEY,\n    titulo VARCHAR(100) NOT NULL,\n    autor VARCHAR(50) NOT NULL,\n    precio DECIMAL(5,2) NOT NULL,\n    publicacion INT NOT NULL,\n    genero VARCHAR(50) NOT NULL\n);\n\n-- Insertando 50 registros en la tabla libros\nINSERT INTO libros (id, titulo, autor, precio, publicacion, genero) VALUES\n(1, 'El se\u00f1or de los anillos', 'J.R.R. Tolkien', 29.99, 1954, 'Fantas\u00eda'),\n(2, 'Cien a\u00f1os de soledad', 'Gabriel Garc\u00eda', 25.99, 1967, 'Realismo m\u00e1gico'),\n(3, '1984', 'George Orwell', 22.50, 1949, 'Distop\u00eda'),\n(4, 'El c\u00f3digo Da Vinci', 'Dan Brown', 24.99, 2003, 'Suspenso'),\n(5, 'El hobbit', 'J.R.R. Tolkien', 19.99, 1937, 'Fantas\u00eda'),\n(6, 'Cr\u00f3nica de una muerte anunciada', 'Gabriel Garc\u00eda', 23.50, 1981, 'Realismo m\u00e1gico'),\n(7, 'Rebeli\u00f3n en la granja', 'George Orwell', 18.75, 1945, 'S\u00e1tira'),\n(8, '\u00c1ngeles y demonios', 'Dan Brown', 22.99, 2000, 'Suspenso'),\n(9, 'El alquimista', 'Paulo Coelho', 15.99, 1988, 'Ficci\u00f3n'),\n(10, 'Don Quijote de la Mancha', 'Miguel de Cervantes', 27.50, 1605, 'Cl\u00e1sico'),\n(11, 'El perfume', 'Patrick S\u00fcskind', 20.99, 1985, 'Ficci\u00f3n hist\u00f3rica'),\n(12, 'Harry Potter y la piedra filosofal', 'J.K. Rowling', 21.99, 1997, 'Fantas\u00eda'),\n(13, 'Harry Potter y la c\u00e1mara secreta', 'J.K. Rowling', 22.99, 1998, 'Fantas\u00eda'),\n(14, 'La sombra del viento', 'Carlos Ruiz Zaf\u00f3n', 23.99, 2001, 'Misterio'),\n(15, 'El nombre del viento', 'Patrick Rothfuss', 26.99, 2007, 'Fantas\u00eda'),\n(16, 'Crimen y castigo', 'Fi\u00f3dor Dostoyevski', 24.50, 1866, 'Cl\u00e1sico'),\n(17, 'Los juegos del hambre', 'Suzanne Collins', 19.99, 2008, 'Distop\u00eda'),\n(18, 'Divergente', 'Veronica Roth', 18.50, 2011, 'Distop\u00eda'),\n(19, 'El principito', 'Antoine de Saint-Exup\u00e9ry', 12.99, 1943, 'F\u00e1bula'),\n(20, 'Orgullo y prejuicio', 'Jane Austen', 17.99, 1813, 'Romance'),\n(21, 'Matar a un ruise\u00f1or', 'Harper Lee', 20.50, 1960, 'Ficci\u00f3n'),\n(22, 'El retrato de Dorian Gray', 'Oscar Wilde', 16.99, 1890, 'Cl\u00e1sico'),\n(23, 'El t\u00fanel', 'Ernesto Sabato', 14.99, 1948, 'Ficci\u00f3n'),\n(24, 'La casa de los esp\u00edritus', 'Isabel Allende', 22.99, 1982, 'Realismo m\u00e1gico'),\n(25, 'Fahrenheit 451', 'Ray Bradbury', 19.99, 1953, 'Distop\u00eda'),\n(26, 'El amor en los tiempos del c\u00f3lera', 'Gabriel Garc\u00eda', 24.99, 1985, 'Romance'),\n(27, 'It', 'Stephen King', 28.99, 1986, 'Terror'),\n(28, 'El resplandor', 'Stephen King', 27.99, 1977, 'Terror'),\n(29, 'Dr\u00e1cula', 'Bram Stoker', 18.99, 1897, 'Terror'),\n(30, 'Frankenstein', 'Mary Shelley', 16.50, 1818, 'Terror'),\n(31, 'Cumbres borrascosas', 'Emily Bront\u00eb', 17.99, 1847, 'Romance'),\n(32, 'El extranjero', 'Albert Camus', 15.50, 1942, 'Filosof\u00eda'),\n(33, 'La metamorfosis', 'Franz Kafka', 14.99, 1915, 'Ficci\u00f3n'),\n(34, 'Sapiens', 'Yuval Noah Harari', 25.99, 2011, 'No ficci\u00f3n'),\n(35, 'Breve historia del tiempo', 'Stephen Hawking', 22.99, 1988, 'No ficci\u00f3n'),\n(36, 'El arte de la guerra', 'Sun Tzu', 13.99, -500, 'Estrategia'),\n(37, 'Las mil y una noches', 'An\u00f3nimo', 20.99, 1700, 'F\u00e1bula'),\n(38, 'El guardi\u00e1n entre el centeno', 'J.D. Salinger', 18.99, 1951, 'Ficci\u00f3n'),\n(39, 'El se\u00f1or de las moscas', 'William Golding', 17.50, 1954, 'Ficci\u00f3n'),\n(40, 'La odisea', 'Homero', 19.99, -800, 'Cl\u00e1sico'),\n(41, 'Moby Dick', 'Herman Melville', 21.99, 1851, 'Aventura'),\n(42, 'El gran Gatsby', 'F. Scott Fitzgerald', 16.99, 1925, 'Ficci\u00f3n'),\n(43, 'Cazadores de sombras', 'Cassandra Clare', 23.99, 2007, 'Fantas\u00eda'),\n(44, 'El diario de Ana Frank', 'Ana Frank', 15.99, 1947, 'No ficci\u00f3n'),\n(45, 'La divina comedia', 'Dante Alighieri', 24.99, 1320, 'Cl\u00e1sico'),\n(46, 'Crep\u00fasculo', 'Stephenie Meyer', 20.99, 2005, 'Romance'),\n(47, 'Juego de tronos', 'George R.R. Martin', 29.99, 1996, 'Fantas\u00eda'),\n(48, 'El paciente ingl\u00e9s', 'Michael Ondaatje', 21.50, 1992, 'Ficci\u00f3n hist\u00f3rica'),\n(49, 'Las cr\u00f3nicas de Narnia', 'C.S. Lewis', 22.99, 1950, 'Fantas\u00eda'),\n(50, 'El lobo estepario', 'Hermann Hesse', 17.99, 1927, 'Filosof\u00eda');\n</code></pre>"},{"location":"content/p3/#explicacion-del-script","title":"Explicaci\u00f3n del Script","text":"<ol> <li>Creaci\u00f3n de la tabla:</li> <li>La tabla <code>libros</code> tiene las siguientes columnas:<ul> <li><code>id</code>: Identificador \u00fanico (clave primaria).</li> <li><code>titulo</code>: Nombre del libro (cadena de hasta 100 caracteres).</li> <li><code>autor</code>: Nombre del autor (cadena de hasta 50 caracteres).</li> <li><code>precio</code>: Precio del libro (decimal con 2 posiciones).</li> <li><code>publicacion</code>: A\u00f1o de publicaci\u00f3n (entero).</li> <li><code>genero</code>: G\u00e9nero del libro (cadena de hasta 50 caracteres).</li> </ul> </li> <li> <p>Se usan restricciones como <code>NOT NULL</code> para garantizar que los campos tengan valores.</p> </li> <li> <p>Inserci\u00f3n de datos:</p> </li> <li>Se insertan 50 registros con datos variados para permitir pruebas con los operadores y funciones mencionados.</li> <li>Los autores se repiten en algunos casos (por ejemplo, J.R.R. Tolkien, Gabriel Garc\u00eda, George Orwell) para practicar GROUP BY y HAVING.</li> <li>Los precios var\u00edan entre 12.99 y 29.99 para practicar BETWEEN, MAX, MIN, SUM, y AVG.</li> <li>Los t\u00edtulos incluyen patrones como \"El\" para practicar LIKE.</li> <li>Los a\u00f1os de publicaci\u00f3n abarcan desde -800 hasta 2011 para practicar BETWEEN y filtros temporales.</li> <li>Los g\u00e9neros (Fantas\u00eda, Distop\u00eda, etc.) permiten agrupaciones y filtrados.</li> </ol>"},{"location":"content/p3/#ejemplos-de-consultas-para-practicar","title":"Ejemplos de Consultas para Practicar","text":"<p>Puedes usar las siguientes consultas para practicar los comandos explicados en la pregunta anterior:</p> <ol> <li> <p>WHERE, AND, OR:    <pre><code>SELECT titulo, autor, precio\nFROM libros\nWHERE precio &gt; 20 AND (publicacion &gt;= 2000 OR autor = 'George Orwell');\n</code></pre></p> </li> <li> <p>LIKE:    <pre><code>SELECT titulo, autor\nFROM libros\nWHERE titulo LIKE 'El%';\n</code></pre></p> </li> <li> <p>BETWEEN:    <pre><code>SELECT titulo, precio\nFROM libros\nWHERE publicacion BETWEEN 1900 AND 2000;\n</code></pre></p> </li> <li> <p>COUNT, SUM, AVG, MAX, MIN:    <pre><code>SELECT genero, \n       COUNT(*) AS total_libros, \n       SUM(precio) AS suma_precios, \n       AVG(precio) AS precio_promedio, \n       MAX(precio) AS precio_maximo, \n       MIN(precio) AS precio_minimo\nFROM libros\nGROUP BY genero;\n</code></pre></p> </li> <li> <p>GROUP BY, HAVING:    <pre><code>SELECT autor, COUNT(*) AS total_libros\nFROM libros\nGROUP BY autor\nHAVING COUNT(*) &gt; 1;\n</code></pre></p> </li> <li> <p>ORDER BY:    <pre><code>SELECT titulo, precio\nFROM libros\nORDER BY precio DESC, titulo ASC;\n</code></pre></p> </li> </ol>"},{"location":"content/p3/#actividad-analisis-de-ventas-de-tienda-electronica","title":"Actividad: An\u00e1lisis de Ventas de Tienda Electr\u00f3nica","text":"<p>Enunciado: Has recibido el encargo de analizar las ventas de una tienda de productos electr\u00f3nicos utilizando una base de datos SQL. La tabla <code>ventas_tienda</code> contiene informaci\u00f3n sobre las ventas realizadas, incluyendo el producto vendido, su categor\u00eda, precio unitario, cantidad vendida, fecha de venta, vendedor y regi\u00f3n. Tu tarea es practicar los comandos SQL aprendidos (WHERE, AND, OR, LIKE, BETWEEN, COUNT, SUM, AVG, MAX, MIN, ORDER BY, GROUP BY, HAVING) resolviendo los siguientes 30 ejercicios. Cada ejercicio requiere escribir una consulta SQL que extraiga informaci\u00f3n espec\u00edfica de la tabla. Los resultados deben ser claros y \u00fatiles para la toma de decisiones de la tienda.</p>"},{"location":"content/p3/#script-sql-para-crear-la-tabla-y-poblarla","title":"Script SQL para Crear la Tabla y Poblarla","text":"<pre><code>-- Creando la tabla ventas_tienda\nCREATE TABLE ventas_tienda (\n    id_venta INT PRIMARY KEY,\n    producto VARCHAR(100) NOT NULL,\n    categoria VARCHAR(50) NOT NULL,\n    precio_unitario DECIMAL(7,2) NOT NULL,\n    cantidad_vendida INT NOT NULL,\n    fecha_venta DATE NOT NULL,\n    vendedor VARCHAR(50) NOT NULL,\n    region VARCHAR(50) NOT NULL\n);\n\n-- Insertando 50 registros en la tabla ventas_tienda\nINSERT INTO ventas_tienda (id_venta, producto, categoria, precio_unitario, cantidad_vendida, fecha_venta, vendedor, region) VALUES\n(1, 'Smartphone Galaxy S23', 'Tel\u00e9fonos', 799.99, 2, '2023-01-15', 'Ana L\u00f3pez', 'Norte'),\n(2, 'Laptop Dell XPS 13', 'Laptops', 1299.99, 1, '2023-02-10', 'Carlos Ruiz', 'Sur'),\n(3, 'Auriculares Bose QC45', 'Audio', 349.99, 3, '2023-03-22', 'Mar\u00eda G\u00f3mez', 'Centro'),\n(4, 'Smart TV LG 55\"', 'Televisores', 599.99, 2, '2023-04-05', 'Juan P\u00e9rez', 'Este'),\n(5, 'Tablet iPad Air', 'Tablets', 649.99, 1, '2023-05-18', 'Ana L\u00f3pez', 'Norte'),\n(6, 'Smartphone iPhone 14', 'Tel\u00e9fonos', 999.99, 2, '2023-06-20', 'Carlos Ruiz', 'Sur'),\n(7, 'Laptop HP Spectre', 'Laptops', 1499.99, 1, '2023-07-12', 'Mar\u00eda G\u00f3mez', 'Centro'),\n(8, 'Auriculares Sony WH-1000XM5', 'Audio', 399.99, 2, '2023-08-25', 'Juan P\u00e9rez', 'Este'),\n(9, 'Smart TV Samsung 65\"', 'Televisores', 799.99, 1, '2023-09-10', 'Ana L\u00f3pez', 'Norte'),\n(10, 'Tablet Samsung Galaxy Tab', 'Tablets', 499.99, 3, '2023-10-05', 'Carlos Ruiz', 'Sur'),\n(11, 'Smartphone Pixel 7', 'Tel\u00e9fonos', 599.99, 2, '2023-11-15', 'Mar\u00eda G\u00f3mez', 'Centro'),\n(12, 'Laptop MacBook Air', 'Laptops', 1199.99, 1, '2023-12-20', 'Juan P\u00e9rez', 'Este'),\n(13, 'Auriculares AirPods Pro', 'Audio', 249.99, 4, '2024-01-10', 'Ana L\u00f3pez', 'Norte'),\n(14, 'Smart TV Sony 50\"', 'Televisores', 699.99, 2, '2024-02-15', 'Carlos Ruiz', 'Sur'),\n(15, 'Tablet Lenovo Tab', 'Tablets', 299.99, 3, '2024-03-22', 'Mar\u00eda G\u00f3mez', 'Centro'),\n(16, 'Smartphone Xiaomi 13', 'Tel\u00e9fonos', 699.99, 2, '2024-04-10', 'Juan P\u00e9rez', 'Este'),\n(17, 'Laptop ASUS ZenBook', 'Laptops', 1399.99, 1, '2024-05-05', 'Ana L\u00f3pez', 'Norte'),\n(18, 'Auriculares JBL Tune', 'Audio', 99.99, 5, '2024-06-12', 'Carlos Ruiz', 'Sur'),\n(19, 'Smart TV TCL 43\"', 'Televisores', 399.99, 2, '2024-07-20', 'Mar\u00eda G\u00f3mez', 'Centro'),\n(20, 'Tablet Huawei MatePad', 'Tablets', 349.99, 2, '2024-08-15', 'Juan P\u00e9rez', 'Este'),\n(21, 'Smartphone OnePlus 11', 'Tel\u00e9fonos', 849.99, 1, '2024-09-10', 'Ana L\u00f3pez', 'Norte'),\n(22, 'Laptop Lenovo ThinkPad', 'Laptops', 1599.99, 1, '2024-10-05', 'Carlos Ruiz', 'Sur'),\n(23, 'Auriculares Sennheiser HD', 'Audio', 199.99, 3, '2024-11-12', 'Mar\u00eda G\u00f3mez', 'Centro'),\n(24, 'Smart TV Hisense 55\"', 'Televisores', 499.99, 2, '2024-12-20', 'Juan P\u00e9rez', 'Este'),\n(25, 'Tablet Amazon Fire', 'Tablets', 149.99, 4, '2025-01-15', 'Ana L\u00f3pez', 'Norte'),\n(26, 'Smartphone Motorola Edge', 'Tel\u00e9fonos', 649.99, 2, '2025-02-10', 'Carlos Ruiz', 'Sur'),\n(27, 'Laptop Acer Predator', 'Laptops', 1799.99, 1, '2025-03-05', 'Mar\u00eda G\u00f3mez', 'Centro'),\n(28, 'Auriculares Beats Solo', 'Audio', 199.99, 3, '2025-04-12', 'Juan P\u00e9rez', 'Este'),\n(29, 'Smart TV Philips 50\"', 'Televisores', 549.99, 2, '2025-05-20', 'Ana L\u00f3pez', 'Norte'),\n(30, 'Tablet Microsoft Surface', 'Tablets', 799.99, 1, '2023-01-25', 'Carlos Ruiz', 'Sur'),\n(31, 'Smartphone Oppo Find X', 'Tel\u00e9fonos', 899.99, 2, '2023-02-15', 'Mar\u00eda G\u00f3mez', 'Centro'),\n(32, 'Laptop MSI Stealth', 'Laptops', 1699.99, 1, '2023-03-10', 'Juan P\u00e9rez', 'Este'),\n(33, 'Auriculares Anker Soundcore', 'Audio', 79.99, 5, '2023-04-20', 'Ana L\u00f3pez', 'Norte'),\n(34, 'Smart TV Vizio 55\"', 'Televisores', 449.99, 2, '2023-05-15', 'Carlos Ruiz', 'Sur'),\n(35, 'Tablet Xiaomi Pad', 'Tablets', 399.99, 3, '2023-06-10', 'Mar\u00eda G\u00f3mez', 'Centro'),\n(36, 'Smartphone Vivo X80', 'Tel\u00e9fonos', 749.99, 2, '2023-07-05', 'Juan P\u00e9rez', 'Este'),\n(37, 'Laptop Razer Blade', 'Laptops', 1999.99, 1, '2023-08-12', 'Ana L\u00f3pez', 'Norte'),\n(38, 'Auriculares Skullcandy', 'Audio', 89.99, 4, '2023-09-20', 'Carlos Ruiz', 'Sur'),\n(39, 'Smart TV Toshiba 43\"', 'Televisores', 349.99, 3, '2023-10-15', 'Mar\u00eda G\u00f3mez', 'Centro'),\n(40, 'Tablet Apple iPad Pro', 'Tablets', 999.99, 1, '2023-11-10', 'Juan P\u00e9rez', 'Este'),\n(41, 'Smartphone Nokia G50', 'Tel\u00e9fonos', 299.99, 3, '2023-12-05', 'Ana L\u00f3pez', 'Norte'),\n(42, 'Laptop Surface Laptop', 'Laptops', 1499.99, 1, '2024-01-20', 'Carlos Ruiz', 'Sur'),\n(43, 'Auriculares Sony WF-1000XM4', 'Audio', 279.99, 2, '2024-02-15', 'Mar\u00eda G\u00f3mez', 'Centro'),\n(44, 'Smart TV LG 65\"', 'Televisores', 799.99, 1, '2024-03-10', 'Juan P\u00e9rez', 'Este'),\n(45, 'Tablet Lenovo Yoga', 'Tablets', 499.99, 2, '2024-04-05', 'Ana L\u00f3pez', 'Norte'),\n(46, 'Smartphone Realme GT', 'Tel\u00e9fonos', 599.99, 2, '2024-05-12', 'Carlos Ruiz', 'Sur'),\n(47, 'Laptop HP Envy', 'Laptops', 1299.99, 1, '2024-06-20', 'Mar\u00eda G\u00f3mez', 'Centro'),\n(48, 'Auriculares Bose Sport', 'Audio', 179.99, 3, '2024-07-15', 'Juan P\u00e9rez', 'Este'),\n(49, 'Smart TV Samsung 75\"', 'Televisores', 999.99, 1, '2024-08-10', 'Ana L\u00f3pez', 'Norte'),\n(50, 'Tablet Samsung Galaxy Tab S8', 'Tablets', 699.99, 2, '2024-09-05', 'Carlos Ruiz', 'Sur');\n</code></pre>"},{"location":"content/p3/#ejercicios","title":"Ejercicios","text":"<ol> <li>Filtrar ventas de una categor\u00eda espec\u00edfica: Selecciona todas las columnas de las ventas de la categor\u00eda 'Tel\u00e9fonos'.</li> <li>Ventas con precio alto: Muestra el producto, precio unitario y vendedor de las ventas con un precio unitario mayor a 1000.</li> <li>Ventas en un rango de fechas: Encuentra todas las ventas realizadas entre el 1 de enero de 2024 y el 31 de diciembre de 2024.</li> <li>Ventas por vendedor espec\u00edfico: Selecciona el producto, cantidad vendida y fecha de venta de todas las ventas realizadas por 'Ana L\u00f3pez'.</li> <li>Productos con nombre espec\u00edfico: Muestra las ventas de productos cuyo nombre comienza con 'Smartphone'.</li> <li>Ventas en regiones espec\u00edficas: Selecciona todas las ventas realizadas en las regiones 'Norte' o 'Sur'.</li> <li>Ventas con m\u00faltiples condiciones: Encuentra las ventas de la categor\u00eda 'Laptops' con un precio unitario mayor a 1200 y cantidad vendida mayor a 1.</li> <li>Ventas recientes: Muestra las ventas realizadas despu\u00e9s del 1 de julio de 2024, ordenadas por fecha descendente.</li> <li>Total de ventas por categor\u00eda: Calcula el n\u00famero total de ventas (usando COUNT) por categor\u00eda.</li> <li>Suma de ingresos por regi\u00f3n: Calcula la suma del ingreso total (precio_unitario * cantidad_vendida) por regi\u00f3n.</li> <li>Precio promedio por categor\u00eda: Encuentra el precio unitario promedio de los productos vendidos por categor\u00eda.</li> <li>Producto m\u00e1s caro: Selecciona el producto con el precio unitario m\u00e1s alto.</li> <li>Producto m\u00e1s barato: Selecciona el producto con el precio unitario m\u00e1s bajo.</li> <li>Ventas por vendedor con filtro: Muestra el n\u00famero de ventas por vendedor, pero solo para aquellos con m\u00e1s de 5 ventas.</li> <li>Ventas de auriculares: Encuentra todas las ventas de productos cuyo nombre contiene 'Auriculares'.</li> <li>Ventas con cantidad alta: Selecciona las ventas con una cantidad vendida mayor o igual a 3.</li> <li>Ingresos por vendedor: Calcula el ingreso total (precio_unitario * cantidad_vendida) por vendedor.</li> <li>Ventas ordenadas por precio: Muestra el producto, precio unitario y categor\u00eda, ordenados por precio unitario descendente.</li> <li>Ventas por regi\u00f3n y categor\u00eda: Agrupa las ventas por regi\u00f3n y categor\u00eda, mostrando el n\u00famero de ventas para cada combinaci\u00f3n.</li> <li>Ventas en 2023: Encuentra todas las ventas realizadas en el a\u00f1o 2023.</li> <li>Vendedores con ingresos altos: Muestra los vendedores con un ingreso total (precio_unitario * cantidad_vendida) mayor a 2000.</li> <li>Productos con nombre largo: Selecciona los productos cuyo nombre tiene m\u00e1s de 20 caracteres.</li> <li>Ventas por mes: Agrupa las ventas por mes (usando EXTRACT o MONTH seg\u00fan el SGBD) y cuenta el n\u00famero de ventas por mes.</li> <li>Ventas de tablets caras: Encuentra las ventas de la categor\u00eda 'Tablets' con un precio unitario mayor a 500.</li> <li>Ventas con bajo inventario: Selecciona las ventas con una cantidad vendida menor a 2.</li> <li>M\u00e1ximo ingreso por venta: Calcula el ingreso m\u00e1ximo (precio_unitario * cantidad_vendida) de una sola venta.</li> <li>Promedio de cantidad vendida por regi\u00f3n: Calcula la cantidad promedio vendida por regi\u00f3n.</li> <li>Ventas ordenadas por vendedor y fecha: Muestra todas las ventas, ordenadas primero por vendedor (alfab\u00e9ticamente) y luego por fecha de venta (ascendente).</li> <li>Ventas por categor\u00eda con filtro: Agrupa las ventas por categor\u00eda y muestra solo aquellas categor\u00edas con un ingreso total mayor a 3000.</li> <li>Consulta combinada: Encuentra los vendedores que han vendido productos de la categor\u00eda 'Tel\u00e9fonos' en 2024, con un ingreso total mayor a 1500, ordenados por ingreso descendente.</li> </ol>"},{"location":"content/p3/#explicacion-de-la-tabla","title":"Explicaci\u00f3n de la Tabla","text":"<ul> <li>Estructura de la tabla:</li> <li><code>id_venta</code>: Identificador \u00fanico de la venta.</li> <li><code>producto</code>: Nombre del producto vendido (e.g., 'Smartphone Galaxy S23').</li> <li><code>categoria</code>: Categor\u00eda del producto (Tel\u00e9fonos, Laptops, Audio, Televisores, Tablets).</li> <li><code>precio_unitario</code>: Precio por unidad del producto.</li> <li><code>cantidad_vendida</code>: Cantidad de unidades vendidas en la transacci\u00f3n.</li> <li><code>fecha_venta</code>: Fecha de la venta (formato DATE).</li> <li><code>vendedor</code>: Nombre del vendedor que realiz\u00f3 la venta.</li> <li><code>region</code>: Regi\u00f3n geogr\u00e1fica de la venta (Norte, Sur, Centro, Este).</li> </ul>"},{"location":"content/p3s/","title":"Actividad: An\u00e1lisis de Ventas de Tienda Electr\u00f3nica","text":"<p>Enunciado (recordatorio): Has recibido el encargo de analizar las ventas de una tienda de productos electr\u00f3nicos utilizando una base de datos SQL. La tabla <code>ventas_tienda</code> contiene informaci\u00f3n sobre las ventas realizadas, incluyendo el producto vendido, su categor\u00eda, precio unitario, cantidad vendida, fecha de venta, vendedor y regi\u00f3n. Los siguientes ejercicios requieren escribir consultas SQL para extraer informaci\u00f3n espec\u00edfica usando los operadores WHERE, AND, OR, LIKE, BETWEEN, las funciones de agregaci\u00f3n COUNT, SUM, AVG, MAX, MIN, y las cl\u00e1usulas ORDER BY, GROUP BY, HAVING.</p> <pre><code>-- Ejercicio 1: Filtrar ventas de una categor\u00eda espec\u00edfica\n-- Selecciona todas las columnas de las ventas de la categor\u00eda 'Tel\u00e9fonos'.\nSELECT *\nFROM ventas_tienda\nWHERE categoria = 'Tel\u00e9fonos';\n\n-- Ejercicio 2: Ventas con precio alto\n-- Muestra el producto, precio unitario y vendedor de las ventas con un precio unitario mayor a 1000.\nSELECT producto, precio_unitario, vendedor\nFROM ventas_tienda\nWHERE precio_unitario &gt; 1000;\n\n-- Ejercicio 3: Ventas en un rango de fechas\n-- Encuentra todas las ventas realizadas entre el 1 de enero de 2024 y el 31 de diciembre de 2024.\nSELECT *\nFROM ventas_tienda\nWHERE fecha_venta BETWEEN '2024-01-01' AND '2024-12-31';\n\n-- Ejercicio 4: Ventas por vendedor espec\u00edfico\n-- Selecciona el producto, cantidad vendida y fecha de venta de todas las ventas realizadas por 'Ana L\u00f3pez'.\nSELECT producto, cantidad_vendida, fecha_venta\nFROM ventas_tienda\nWHERE vendedor = 'Ana L\u00f3pez';\n\n-- Ejercicio 5: Productos con nombre espec\u00edfico\n-- Muestra las ventas de productos cuyo nombre comienza con 'Smartphone'.\nSELECT *\nFROM ventas_tienda\nWHERE producto LIKE 'Smartphone%';\n\n-- Ejercicio 6: Ventas en regiones espec\u00edficas\n-- Selecciona todas las ventas realizadas en las regiones 'Norte' o 'Sur'.\nSELECT *\nFROM ventas_tienda\nWHERE region = 'Norte' OR region = 'Sur';\n\n-- Ejercicio 7: Ventas con m\u00faltiples condiciones\n-- Encuentra las ventas de la categor\u00eda 'Laptops' con un precio unitario mayor a 1200 y cantidad vendida mayor a 1.\nSELECT *\nFROM ventas_tienda\nWHERE categoria = 'Laptops' AND precio_unitario &gt; 1200 AND cantidad_vendida &gt; 1;\n\n-- Ejercicio 8: Ventas recientes\n-- Muestra las ventas realizadas despu\u00e9s del 1 de julio de 2024, ordenadas por fecha descendente.\nSELECT *\nFROM ventas_tienda\nWHERE fecha_venta &gt; '2024-07-01'\nORDER BY fecha_venta DESC;\n\n-- Ejercicio 9: Total de ventas por categor\u00eda\n-- Calcula el n\u00famero total de ventas (usando COUNT) por categor\u00eda.\nSELECT categoria, COUNT(*) AS total_ventas\nFROM ventas_tienda\nGROUP BY categoria;\n\n-- Ejercicio 10: Suma de ingresos por regi\u00f3n\n-- Calcula la suma del ingreso total (precio_unitario * cantidad_vendida) por regi\u00f3n.\nSELECT region, SUM(precio_unitario * cantidad_vendida) AS ingreso_total\nFROM ventas_tienda\nGROUP BY region;\n\n-- Ejercicio 11: Precio promedio por categor\u00eda\n-- Encuentra el precio unitario promedio de los productos vendidos por categor\u00eda.\nSELECT categoria, AVG(precio_unitario) AS precio_promedio\nFROM ventas_tienda\nGROUP BY categoria;\n\n-- Ejercicio 12: Producto m\u00e1s caro\n-- Selecciona el producto con el precio unitario m\u00e1s alto.\nSELECT producto, precio_unitario\nFROM ventas_tienda\nWHERE precio_unitario = (SELECT MAX(precio_unitario) FROM ventas_tienda);\n\n-- Ejercicio 13: Producto m\u00e1s barato\n-- Selecciona el producto con el precio unitario m\u00e1s bajo.\nSELECT producto, precio_unitario\nFROM ventas_tienda\nWHERE precio_unitario = (SELECT MIN(precio_unitario) FROM ventas_tienda);\n\n-- Ejercicio 14: Ventas por vendedor con filtro\n-- Muestra el n\u00famero de ventas por vendedor, pero solo para aquellos con m\u00e1s de 5 ventas.\nSELECT vendedor, COUNT(*) AS total_ventas\nFROM ventas_tienda\nGROUP BY vendedor\nHAVING COUNT(*) &gt; 5;\n\n-- Ejercicio 15: Ventas de auriculares\n-- Encuentra todas las ventas de productos cuyo nombre contiene 'Auriculares'.\nSELECT *\nFROM ventas_tienda\nWHERE producto LIKE '%Auriculares%';\n\n-- Ejercicio 16: Ventas con cantidad alta\n-- Selecciona las ventas con una cantidad vendida mayor o igual a 3.\nSELECT *\nFROM ventas_tienda\nWHERE cantidad_vendida &gt;= 3;\n\n-- Ejercicio 17: Ingresos por vendedor\n-- Calcula el ingreso total (precio_unitario * cantidad_vendida) por vendedor.\nSELECT vendedor, SUM(precio_unitario * cantidad_vendida) AS ingreso_total\nFROM ventas_tienda\nGROUP BY vendedor;\n\n-- Ejercicio 18: Ventas ordenadas por precio\n-- Muestra el producto, precio unitario y categor\u00eda, ordenados por precio unitario descendente.\nSELECT producto, precio_unitario, categoria\nFROM ventas_tienda\nORDER BY precio_unitario DESC;\n\n-- Ejercicio 19: Ventas por regi\u00f3n y categor\u00eda\n-- Agrupa las ventas por regi\u00f3n y categor\u00eda, mostrando el n\u00famero de ventas para cada combinaci\u00f3n.\nSELECT region, categoria, COUNT(*) AS total_ventas\nFROM ventas_tienda\nGROUP BY region, categoria;\n\n-- Ejercicio 20: Ventas en 2023\n-- Encuentra todas las ventas realizadas en el a\u00f1o 2023.\nSELECT *\nFROM ventas_tienda\nWHERE YEAR(fecha_venta) = 2023;\n\n-- Ejercicio 21: Vendedores con ingresos altos\n-- Muestra los vendedores con un ingreso total (precio_unitario * cantidad_vendida) mayor a 2000.\nSELECT vendedor, SUM(precio_unitario * cantidad_vendida) AS ingreso_total\nFROM ventas_tienda\nGROUP BY vendedor\nHAVING SUM(precio_unitario * cantidad_vendida) &gt; 2000;\n\n-- Ejercicio 22: Productos con nombre largo\n-- Selecciona los productos cuyo nombre tiene m\u00e1s de 20 caracteres.\nSELECT producto\nFROM ventas_tienda\nWHERE LENGTH(producto) &gt; 20;\n\n-- Ejercicio 23: Ventas por mes\n-- Agrupa las ventas por mes y cuenta el n\u00famero de ventas por mes.\nSELECT EXTRACT(MONTH FROM fecha_venta) AS mes, EXTRACT(YEAR FROM fecha_venta) AS a\u00f1o, COUNT(*) AS total_ventas\nFROM ventas_tienda\nGROUP BY EXTRACT(YEAR FROM fecha_venta), EXTRACT(MONTH FROM fecha_venta);\n\n-- Ejercicio 24: Ventas de tablets caras\n-- Encuentra las ventas de la categor\u00eda 'Tablets' con un precio unitario mayor a 500.\nSELECT *\nFROM ventas_tienda\nWHERE categoria = 'Tablets' AND precio_unitario &gt; 500;\n\n-- Ejercicio 25: Ventas con bajo inventario\n-- Selecciona las ventas con una cantidad vendida menor a 2.\nSELECT *\nFROM ventas_tienda\nWHERE cantidad_vendida &lt; 2;\n\n-- Ejercicio 26: M\u00e1ximo ingreso por venta\n-- Calcula el ingreso m\u00e1ximo (precio_unitario * cantidad_vendida) de una sola venta.\nSELECT producto, (precio_unitario * cantidad_vendida) AS ingreso_venta\nFROM ventas_tienda\nWHERE (precio_unitario * cantidad_vendida) = (SELECT MAX(precio_unitario * cantidad_vendida) FROM ventas_tienda);\n\n-- Ejercicio 27: Promedio de cantidad vendida por regi\u00f3n\n-- Calcula la cantidad promedio vendida por regi\u00f3n.\nSELECT region, AVG(cantidad_vendida) AS cantidad_promedio\nFROM ventas_tienda\nGROUP BY region;\n\n-- Ejercicio 28: Ventas ordenadas por vendedor y fecha\n-- Muestra todas las ventas, ordenadas primero por vendedor (alfab\u00e9ticamente) y luego por fecha de venta (ascendente).\nSELECT *\nFROM ventas_tienda\nORDER BY vendedor ASC, fecha_venta ASC;\n\n-- Ejercicio 29: Ventas por categor\u00eda con filtro\n-- Agrupa las ventas por categor\u00eda y muestra solo aquellas categor\u00edas con un ingreso total mayor a 3000.\nSELECT categoria, SUM(precio_unitario * cantidad_vendida) AS ingreso_total\nFROM ventas_tienda\nGROUP BY categoria\nHAVING SUM(precio_unitario * cantidad_vendida) &gt; 3000;\n\n-- Ejercicio 30: Consulta combinada\n-- Encuentra los vendedores que han vendido productos de la categor\u00eda 'Tel\u00e9fonos' en 2024, con un ingreso total mayor a 1500, ordenados por ingreso descendente.\nSELECT vendedor, SUM(precio_unitario * cantidad_vendida) AS ingreso_total\nFROM ventas_tienda\nWHERE categoria = 'Tel\u00e9fonos' AND YEAR(fecha_venta) = 2024\nGROUP BY vendedor\nHAVING SUM(precio_unitario * cantidad_vendida) &gt; 1500\nORDER BY ingreso_total DESC;\n</code></pre>"},{"location":"content/p3s/#explicacion-de-las-soluciones","title":"Explicaci\u00f3n de las Soluciones","text":"<ol> <li>Ejercicio 1: Filtra las ventas por la categor\u00eda 'Tel\u00e9fonos' usando WHERE.</li> <li>Ejercicio 2: Usa WHERE para seleccionar ventas con precio unitario mayor a 1000, mostrando solo las columnas solicitadas.</li> <li>Ejercicio 3: Utiliza BETWEEN para filtrar ventas en 2024.</li> <li>Ejercicio 4: Filtra las ventas de 'Ana L\u00f3pez' con WHERE y selecciona las columnas solicitadas.</li> <li>Ejercicio 5: Usa LIKE con el patr\u00f3n 'Smartphone%' para encontrar productos que comienzan con 'Smartphone'.</li> <li>Ejercicio 6: Combina dos condiciones con OR para filtrar ventas de las regiones 'Norte' o 'Sur'.</li> <li>Ejercicio 7: Combina tres condiciones con AND para filtrar ventas de 'Laptops' con precio &gt; 1200 y cantidad &gt; 1.</li> <li>Ejercicio 8: Filtra ventas posteriores a julio de 2024 con WHERE y las ordena con ORDER BY DESC.</li> <li>Ejercicio 9: Usa GROUP BY y COUNT para contar ventas por categor\u00eda.</li> <li>Ejercicio 10: Calcula el ingreso total (<code>precio_unitario * cantidad_vendida</code>) por regi\u00f3n con SUM y GROUP BY.</li> <li>Ejercicio 11: Calcula el promedio de <code>precio_unitario</code> por categor\u00eda con AVG y GROUP BY.</li> <li>Ejercicio 12: Usa una subconsulta con MAX para encontrar el producto m\u00e1s caro.</li> <li>Ejercicio 13: Usa una subconsulta con MIN para encontrar el producto m\u00e1s barato.</li> <li>Ejercicio 14: Usa GROUP BY y HAVING para mostrar vendedores con m\u00e1s de 5 ventas.</li> <li>Ejercicio 15: Usa LIKE con '%Auriculares%' para encontrar ventas de auriculares.</li> <li>Ejercicio 16: Filtra ventas con cantidad vendida \u2265 3 usando WHERE.</li> <li>Ejercicio 17: Calcula el ingreso total por vendedor con SUM y GROUP BY.</li> <li>Ejercicio 18: Ordena las ventas por precio unitario descendente con ORDER BY.</li> <li>Ejercicio 19: Agrupa por regi\u00f3n y categor\u00eda con GROUP BY y cuenta las ventas con COUNT.</li> <li>Ejercicio 20: Usa la funci\u00f3n <code>YEAR</code> (o <code>EXTRACT</code> en algunos SGBD) para filtrar ventas de 2023.</li> <li>Ejercicio 21: Usa GROUP BY y HAVING para mostrar vendedores con ingresos &gt; 2000.</li> <li>Ejercicio 22: Usa la funci\u00f3n <code>LENGTH</code> para filtrar productos con nombres de m\u00e1s de 20 caracteres.</li> <li>Ejercicio 23: Agrupa por a\u00f1o y mes con EXTRACT y GROUP BY para contar ventas por mes.</li> <li>Ejercicio 24: Combina WHERE y AND para filtrar tablets con precio &gt; 500.</li> <li>Ejercicio 25: Filtra ventas con cantidad &lt; 2 usando WHERE.</li> <li>Ejercicio 26: Usa una subconsulta con MAX para encontrar la venta con mayor ingreso.</li> <li>Ejercicio 27: Calcula el promedio de <code>cantidad_vendida</code> por regi\u00f3n con AVG y GROUP BY.</li> <li>Ejercicio 28: Usa ORDER BY con dos criterios (vendedor y fecha) para ordenar las ventas.</li> <li>Ejercicio 29: Usa GROUP BY y HAVING para mostrar categor\u00edas con ingresos &gt; 3000.</li> <li>Ejercicio 30: Combina WHERE, GROUP BY, HAVING, y ORDER BY para una consulta compleja que filtra por categor\u00eda, a\u00f1o, e ingreso.</li> </ol>"},{"location":"content/p4/","title":"Relaciones y JOINs en Bases de Datos","text":"<p>En este documento se presenta una explicaci\u00f3n detallada y extensa sobre los tipos de relaciones en bases de datos relacionales (1:1, 1:N, N:N), los tipos de JOIN (INNER, LEFT, RIGHT, FULL) y el uso de claves for\u00e1neas en consultas, utilizando un enfoque claro y estructurado para facilitar su comprensi\u00f3n.</p>"},{"location":"content/p4/#1-tipos-de-relaciones-en-bases-de-datos-relacionales","title":"1. Tipos de Relaciones en Bases de Datos Relacionales","text":"<p>Las bases de datos relacionales organizan los datos en tablas, y las relaciones definen c\u00f3mo estas tablas est\u00e1n conectadas entre s\u00ed. Estas relaciones se establecen mediante claves primarias y claves for\u00e1neas, y se clasifican en tres tipos principales: 1:1 (uno a uno), 1:N (uno a muchos) y N:N (muchos a muchos).</p>"},{"location":"content/p4/#11-relacion-11-uno-a-uno","title":"1.1. Relaci\u00f3n 1:1 (Uno a Uno)","text":"<p>Una relaci\u00f3n 1:1 implica que un registro en una tabla est\u00e1 asociado con exactamente un registro en otra tabla, y viceversa. Este tipo de relaci\u00f3n es menos com\u00fan, pero se utiliza cuando los datos de una entidad se dividen en dos tablas por razones de dise\u00f1o, como mejorar la normalizaci\u00f3n o separar informaci\u00f3n sensible.</p> <p>Caracter\u00edsticas:</p> <ul> <li>Cada registro en la tabla A tiene un solo registro correspondiente en la tabla B.</li> <li>Cada registro en la tabla B tiene un solo registro correspondiente en la tabla A.</li> <li>La clave primaria de una tabla se usa como clave for\u00e1nea en la otra, o viceversa.</li> </ul> <p>Ejemplo: Supongamos que tenemos una base de datos de empleados, donde cada empleado tiene un solo perfil de usuario. Dividimos la informaci\u00f3n en dos tablas:</p> <ul> <li>Tabla <code>empleados</code>: Almacena datos generales (ID_Empleado, Nombre, Apellido).</li> <li>Tabla <code>perfiles_usuario</code>: Almacena datos de acceso (ID_Perfil, ID_Empleado, Nombre_Usuario, Contrase\u00f1a).</li> </ul> <pre><code>CREATE TABLE empleados (\n    ID_Empleado INT PRIMARY KEY,\n    Nombre VARCHAR(50),\n    Apellido VARCHAR(50)\n);\n\nCREATE TABLE perfiles_usuario (\n    ID_Perfil INT PRIMARY KEY,\n    ID_Empleado INT UNIQUE,\n    Nombre_Usuario VARCHAR(50),\n    Contrase\u00f1a VARCHAR(100),\n    FOREIGN KEY (ID_Empleado) REFERENCES empleados(ID_Empleado)\n);\n</code></pre> <p>En este caso, <code>ID_Empleado</code> en <code>perfiles_usuario</code> es una clave for\u00e1nea que asegura que cada perfil est\u00e9 vinculado a un solo empleado, y el uso de <code>UNIQUE</code> garantiza que no haya m\u00e1s de un perfil por empleado.</p> <p>Uso: - Separar datos sensibles (e.g., contrase\u00f1as) de datos generales. - Optimizar el almacenamiento de datos opcionales o raramente consultados.</p>"},{"location":"content/p4/#12-relacion-1n-uno-a-muchos","title":"1.2. Relaci\u00f3n 1:N (Uno a Muchos)","text":"<p>Una relaci\u00f3n 1:N significa que un registro en una tabla (la tabla \"uno\") puede estar asociado con m\u00faltiples registros en otra tabla (la tabla \"muchos\"), pero cada registro en la tabla \"muchos\" est\u00e1 asociado con un solo registro en la tabla \"uno\". Es el tipo de relaci\u00f3n m\u00e1s com\u00fan en bases de datos relacionales.</p> <p>Caracter\u00edsticas:</p> <ul> <li>Un registro en la tabla A puede tener cero o m\u00e1s registros relacionados en la tabla B.</li> <li>Un registro en la tabla B est\u00e1 asociado con exactamente un registro en la tabla A.</li> <li>La clave primaria de la tabla A se usa como clave for\u00e1nea en la tabla B.</li> </ul> <p>Ejemplo: Una empresa tiene departamentos y empleados, donde un departamento puede tener muchos empleados, pero cada empleado pertenece a un solo departamento.</p> <ul> <li>Tabla <code>departamentos</code>: Almacena informaci\u00f3n de departamentos (ID_Departamento, Nombre_Departamento).</li> <li>Tabla <code>empleados</code>: Almacena informaci\u00f3n de empleados (ID_Empleado, Nombre, ID_Departamento).</li> </ul> <pre><code>CREATE TABLE departamentos (\n    ID_Departamento INT PRIMARY KEY,\n    Nombre_Departamento VARCHAR(50)\n);\n\nCREATE TABLE empleados (\n    ID_Empleado INT PRIMARY KEY,\n    Nombre VARCHAR(50),\n    ID_Departamento INT,\n    FOREIGN KEY (ID_Departamento) REFERENCES departamentos(ID_Departamento)\n);\n</code></pre> <p>Aqu\u00ed, <code>ID_Departamento</code> en <code>empleados</code> es una clave for\u00e1nea que vincula cada empleado a un departamento.</p> <p>Uso:</p> <ul> <li>Modelar jerarqu\u00edas o estructuras de contenci\u00f3n (e.g., un cliente con m\u00faltiples pedidos, una categor\u00eda con m\u00faltiples productos).</li> </ul>"},{"location":"content/p4/#13-relacion-nn-muchos-a-muchos","title":"1.3. Relaci\u00f3n N:N (Muchos a Muchos)","text":"<p>Una relaci\u00f3n N:N indica que m\u00faltiples registros en una tabla pueden estar asociados con m\u00faltiples registros en otra tabla. Este tipo de relaci\u00f3n requiere una tabla intermedia (o tabla de uni\u00f3n) para gestionar las asociaciones.</p> <p>Caracter\u00edsticas:</p> <ul> <li>Un registro en la tabla A puede estar relacionado con varios registros en la tabla B, y viceversa.</li> <li>Se implementa mediante una tabla intermedia que contiene las claves primarias de ambas tablas como claves for\u00e1neas.</li> <li>La tabla intermedia puede incluir atributos adicionales, como fechas o estados, seg\u00fan el contexto.</li> </ul> <p>Ejemplo: En una escuela, los estudiantes pueden inscribirse en m\u00faltiples cursos, y cada curso puede tener m\u00faltiples estudiantes.</p> <ul> <li>Tabla <code>estudiantes</code>: Almacena datos de estudiantes (ID_Estudiante, Nombre).</li> <li>Tabla <code>cursos</code>: Almacena datos de cursos (ID_Curso, Nombre_Curso).</li> <li>Tabla <code>inscripciones</code>: Tabla intermedia que vincula estudiantes y cursos (ID_Estudiante, ID_Curso, Fecha_Inscripcion).</li> </ul> <pre><code>CREATE TABLE estudiantes (\n    ID_Estudiante INT PRIMARY KEY,\n    Nombre VARCHAR(50)\n);\n\nCREATE TABLE cursos (\n    ID_Curso INT PRIMARY KEY,\n    Nombre_Curso VARCHAR(50)\n);\n\nCREATE TABLE inscripciones (\n    ID_Estudiante INT,\n    ID_Curso INT,\n    Fecha_Inscripcion DATE,\n    PRIMARY KEY (ID_Estudiante, ID_Curso),\n    FOREIGN KEY (ID_Estudiante) REFERENCES estudiantes(ID_Estudiante),\n    FOREIGN KEY (ID_Curso) REFERENCES cursos(ID_Curso)\n);\n</code></pre> <p>La tabla <code>inscripciones</code> usa una clave primaria compuesta (<code>ID_Estudiante</code>, <code>ID_Curso</code>) para evitar duplicados y garantizar la integridad.</p> <p>Uso:</p> <ul> <li>Modelar relaciones complejas, como asignaciones (e.g., empleados a proyectos, productos a pedidos).</li> </ul>"},{"location":"content/p4/#2-tipos-de-join","title":"2. Tipos de JOIN","text":"<p>Los JOINs son operaciones en SQL que combinan filas de dos o m\u00e1s tablas basadas en una condici\u00f3n. Los principales tipos de JOIN son INNER JOIN, LEFT JOIN, RIGHT JOIN y FULL JOIN. Cada uno determina qu\u00e9 filas se incluyen en el resultado final.</p>"},{"location":"content/p4/#21-inner-join","title":"2.1. INNER JOIN","text":"<p>El INNER JOIN devuelve solo las filas donde hay una coincidencia en ambas tablas seg\u00fan la condici\u00f3n de uni\u00f3n.</p> <p>Caracter\u00edsticas:</p> <ul> <li>Solo incluye registros que cumplen con la condici\u00f3n de JOIN.</li> <li>Es el tipo de JOIN m\u00e1s restrictivo.</li> <li>Si no hay coincidencia, los registros no aparecer\u00e1n en el resultado.</li> </ul> <p>Ejemplo: Queremos listar los empleados y sus departamentos, pero solo para aquellos empleados que est\u00e1n asignados a un departamento.</p> <pre><code>SELECT e.ID_empleado, e.Nombre, d.Nombre_Departamento\nFROM empleados e\nINNER JOIN departamentos d ON e.ID_Departamento = d.ID_Departamento;\n</code></pre> <p>Resultado:</p> ID_Empleado Nombre Nombre_Departamento 1 Juan Ventas 2 Ana Marketing <p>Si un empleado no tiene un departamento asignado (i.e., <code>ID_Departamento</code> es <code>NULL</code>), no aparecer\u00e1 en el resultado.</p> <p>Uso:</p> <ul> <li>Cuando solo se desean registros con correspondencias completas en ambas tablas.</li> </ul>"},{"location":"content/p4/#22-left-join-left-outer-join","title":"2.2. LEFT JOIN (LEFT OUTER JOIN)","text":"<p>El LEFT JOIN devuelve todas las filas de la tabla izquierda (la primera tabla mencionada), y las filas coincidentes de la tabla derecha. Si no hay coincidencia, se devuelven valores completos <code>NULLNULL</code> para las columnas de la tabla derecha.</p> <p>Caracter\u00edsticas:</p> <ul> <li>Prioriza todos los registros de la tabla izquierda.</li> <li>\u00datil para identificar registros sin correspondencia en la tabla secundaria.</li> </ul> <p>Ejemplo: Listar todos los empleados, incluso si no tienen un departamento.</p> <pre><code>SELECT e.ID_Empleado, e.Nombre, d.Nombre_Departamento\nFROM empleados e\nLEFT OUTER JOIN departamentos d ON e.ID_Departamento = d.ID_Departamento;\n</code></pre> <p>Resultado:</p> ID_Empleado Nombre Nombre_Departamento 1 Juan Ventas 2 Ana Marketing 3 Luis NULL <p>Aqu\u00ed, Luis aparece aunque no est\u00e9 asignado a ning\u00fan departamento.</p> <p>Uso: - Analizar datos incompletos o faltantes en la tabla secundaria (e.g., clientes sin pedidos).</p>"},{"location":"content/p4/#23-right-join-right-outer-join","title":"2.3. RIGHT JOIN (RIGHT OUTER JOIN)","text":"<p>El RIGHT JOIN es el opuesto al LEFT JOIN. Devuelve todas las filas de la tabla derecha y las filas coincidentes de la tabla izquierda. Si no hay coincidencia, se devuelven valores <code>NULL</code> para las columnas de la tabla izquierda.</p> <p>Caracter\u00edsticas: - Prioriza todos los registros de la tabla derecha. - Menos com\u00fan, ya que puede reescribirse como un LEFT JOIN intercambiando las tablas.</p> <p>Ejemplo: Listar todos los departamentos, incluso si no tienen empleados.</p> <pre><code>SELECT e.ID_Empleado, e.Nombre, d.Nombre_Departamento\nFROM empleados e\nRIGHT OUTER JOIN departamentos d ON e.ID_Departamento = d.ID_Departamento;\n</code></pre> <p>Resultado:</p> ID_Empleado Nombre Nombre_Departamento 1 Juan Ventas 2 Ana Marketing NULL NULL Recursos Humanos <p>Aqu\u00ed, \"Recursos Humanos\" aparece aunque no tenga empleados asignados.</p> <p>Uso: - Identificar registros en la tabla secundaria que no tienen v\u00ednculos en la tabla primaria.</p>"},{"location":"content/p4/#24-full-join-full-outer-join","title":"2.4. FULL JOIN (FULL OUTER JOIN)","text":"<p>El FULL JOIN devuelve todas las filas de ambas tablas, con coincidencias donde las haya. Si no hay coincidencia, se devuelven valores <code>NULL</code> para las columnas de la tabla que falta.</p> <p>Caracter\u00edsticas:</p> <ul> <li>Combina los resultados de LEFT JOIN y RIGHT JOIN.</li> <li>Puede generar conjuntos de datos grandes.</li> <li>No todos los motores de bases de datos lo admiten (e.g., MySQL no lo soporta).</li> </ul> <p>Ejemplo: Listar todos los empleados y todos los departamentos, incluyendo los sin asignaci\u00f3n.</p> <pre><code>SELECT e.ID_Empleado, e.Nombre, d.Nombre_Departamento\nFROM empleados e\nFULL OUTER JOIN departamentos d ON e.ID_Departamento = d.ID_Departamento;\n</code></pre> <p>Resultado:</p> ID_Empleado Nombre Nombre_Departamento 1 -1 Juan 2 2 Ana 3 3 Luis NULL NULL NULL <p>Uso:</p> <ul> <li>An\u00e1lisis completo para identificar relaciones faltantes en ambas tablas.</li> </ul>"},{"location":"content/p4/#3-uso-de-claves-foraneas-en-consultas-clientes","title":"3. Uso de Claves For\u00e1neas en Consultas Clientes","text":"<p>Las claves for\u00e1neas son esenciales para mantener la integridad referencial en las bases de datos relacionales y se utilizan ampliamente en consultas para vincular tablas. A continuaci\u00f3n, se explica c\u00f3mo se usan y mejores pr\u00e1cticas.</p> <p>Definici\u00f3n: Una clave for\u00e1nea es un campo (o conjunto de campos) en una tabla que referencia la clave primaria de otra tabla, asegurando que los valores en la clave for\u00e1nea correspondan a valores v\u00e1lidos en la tabla referenciada.</p> <p>Ejemplo de Definici\u00f3n: En la relaci\u00f3n <code>1:N</code> entre <code>departamentos</code> y <code>empleados</code>, la columna <code>ID_Departamento</code> en <code>empleados</code> es una clave for\u00e1nea:</p> <pre><code>FOREIGN KEY (ID_Departamento) REFERENCES departamentos(ID_Departamento)\n</code></pre> <p>Uso en Consultas: 1. Unir Tablas con JOIN:    Las claves for\u00e1neas se utilizan en la cl\u00e1usula <code>ON</code> de los JOINs para especificar la relaci\u00f3n entre tablas.</p> <pre><code>SELECT e.Nombre, d.Nombre_Departamento\nFROM empleados e\nINNER JOIN departamentos d\nON e.ID_Departamento = d.ID_Departamento;\n</code></pre> <ol> <li>Filtrado:    Se pueden usar en cl\u00e1usulas <code>WHERE</code> para filtrar datos basados en condiciones relacionadas con la tabla referenciada.</li> </ol> <pre><code>SELECT e.Nombre\nFROM empleados e\nWHERE e.ID_Departamento = (SELECT ID_Departamento FROM departamentos WHERE Nombre_Departamentos = 'Ventas');\n</code></pre> <ol> <li>Actualizaciones y Eliminaciones:    Las claves for\u00e1neas pueden configurarse con acciones en cascada (<code>ON DELETE CASCADE</code>, <code>ON UPDATE CASCADE</code>) para propagar cambios autom\u00e1ticamente.</li> </ol> <pre><code>CREATE TABLE empleados (\n    ID_Empleado INT PRIMARY KEY,\n    Nombre VARCHAR(50),\n    ID_Departamento INT,\n    FOREIGN KEY (ID_Departamento) REFERENCES departamentos(ID_Departamento)\n    ON DELETE SET NULL\n    ON UPDATE CASCADE\n);\n</code></pre> <ul> <li><code>ON DELETE SET NULL</code>: Si se elimina un departamento, el <code>ID_Departamento</code> de los empleados se establece en <code>NULL</code>.</li> <li><code>ON UPDATE CASCADE</code>: Si se actualiza un <code>ID_Departamento</code> en <code>departamentos</code>, se actualiza autom\u00e1ticamente en <code>empleados</code>.</li> </ul> <p>Mejores Pr\u00e1cticas:</p> <ul> <li>Aseg\u00farate de que las claves for\u00e1neas tengan \u00edndices para mejorar el rendimiento de las consultas.</li> <li>Usa nombres claros para las claves for\u00e1neas (e.g., <code>ID_Departamento</code> en lugar de <code>ID</code>).</li> <li>Evita ciclos de referencias entre tablas, ya que pueden complicar las operaciones.</li> <li>Valida la integridad de los datos antes de insertar o actualizar registros para evitar errores de violaci\u00f3n de claves for\u00e1neas.</li> </ul> <p>Ejemplo Completo: Listar empleados con su departamento y el n\u00famero total de empleados por departamento:</p> <pre><code>SELECT d.Nombre_Departamento, COUNT(*)e.ID_Empleado) AS Total_Empleados\nFROM departamentos d\nLEFT JOIN empleados e\nON d.ID_Departamento = e.ID_Departamento\nGROUP BY d.ID_Departamento, d.Nombre_Departamento;\n</code></pre> <p>Resultado:</p> Nombre_Departamento Total_Empleados Ventas 2 Marketing 1 Recursos Humanos 0"},{"location":"content/p4/#actividad-educativa-entendiendo-relaciones-y-joins-en-sql-con-un-ejemplo-de-inventario-avanzado-colombia-mysql","title":"Actividad Educativa: Entendiendo Relaciones y JOINs en SQL con un Ejemplo de Inventario Avanzado (Colombia, MySQL)","text":"<p>Esta actividad te ayudar\u00e1 a comprender los conceptos de relaciones (uno a uno y uno a muchos) y JOINs en SQL de manera clara, intuitiva y pr\u00e1ctica, adaptada al contexto de Colombia y optimizada para MySQL. We use an example based on the inventory of an electronics store in Colombia, with prices in Colombian pesos (COP) and product names relevant to the local market. Incluiremos cuatro tablas con relaciones avanzadas y resolveremos todos los ejercicios con explicaciones detalladas, asegurando compatibilidad con MySQL. \u00a1Vamos a aprender paso a paso!</p>"},{"location":"content/p4/#introduccion-por-que-aprender-sobre-relaciones-y-joins","title":"Introducci\u00f3n: \u00bfPor qu\u00e9 aprender sobre relaciones y JOINs?","text":"<p>Imagina que trabajas en una tienda de productos electr\u00f3nicos en Medell\u00edn que gestiona informaci\u00f3n de productos, categor\u00edas, proveedores y garant\u00edas. Las relaciones te permiten conectar estas tablas de manera eficiente, y los JOINs en SQL te ayudan a combinar datos para responder preguntas como: \u00bfQu\u00e9 productos tienen garant\u00eda? \u00bfQui\u00e9n los suministra? \u00bfQu\u00e9 categor\u00edas est\u00e1n vac\u00edas?</p> <p>En esta actividad:</p> <ol> <li>Crearemos cuatro tablas: Categorias, Proveedores, Productos, y Garantias.</li> <li>Estableceremos relaciones uno a muchos (Categorias-Productos, Proveedores-Productos) y uno a uno (Productos-Garantias).</li> <li>Insertaremos datos realistas con 10 registros por tabla (o menos para Garantias).</li> <li>Explicaremos relaciones y JOINs (INNER JOIN, LEFT JOIN, RIGHT JOIN, y una emulaci\u00f3n de FULL JOIN para MySQL).</li> <li>Resolveremos cinco ejercicios pr\u00e1cticos con explicaciones detalladas.</li> </ol>"},{"location":"content/p4/#paso-1-creando-las-tablas","title":"Paso 1: Creando las Tablas","text":""},{"location":"content/p4/#contexto-una-tienda-de-electronicos-en-colombia","title":"Contexto: Una Tienda de Electr\u00f3nicos en Colombia","text":"<p>Creamos cuatro tablas:</p> <ul> <li>Categorias: Almacena categor\u00edas de productos (por ejemplo, \"Celulares\").</li> <li>Proveedores: Almacena proveedores que suministran productos.</li> <li>Productos: Almacena productos, cada uno asociado a una categor\u00eda y un proveedor.</li> <li>Garantias: Almacena garant\u00edas, cada una asociada a un solo producto.</li> </ul>"},{"location":"content/p4/#estructura-de-las-tablas","title":"Estructura de las Tablas","text":""},{"location":"content/p4/#tabla-categorias","title":"Tabla: Categorias","text":"<ul> <li>id_categoria (clave primaria): Identificador \u00fanico.</li> <li>nombre_categoria: Nombre de la categor\u00eda.</li> <li>descripcion: Descripci\u00f3n breve.</li> </ul>"},{"location":"content/p4/#tabla-proveedores","title":"Tabla: Proveedores","text":"<ul> <li>id_proveedor (clave primaria): Identificador \u00fanico.</li> <li>nombre_proveedor: Nombre del proveedor.</li> <li>ciudad: Ciudad donde opera.</li> </ul>"},{"location":"content/p4/#tabla-productos","title":"Tabla: Productos","text":"<ul> <li>id_producto (clave primaria): Identificador \u00fanico.</li> <li>nombre_producto: Nombre del producto.</li> <li>precio: Precio en COP.</li> <li>id_categoria (clave for\u00e1nea): Conecta con Categorias (uno a muchos).</li> <li>id_proveedor (clave for\u00e1nea): Conecta con Proveedores (uno a muchos).</li> </ul>"},{"location":"content/p4/#tabla-garantias","title":"Tabla: Garantias","text":"<ul> <li>id_garantia (clave primaria): Identificador \u00fanico.</li> <li>id_producto (clave primaria y for\u00e1nea): Conecta con un solo producto (uno a uno).</li> <li>duracion_meses: Duraci\u00f3n de la garant\u00eda.</li> <li>condiciones: Detalles de la garant\u00eda.</li> </ul>"},{"location":"content/p4/#script-sql-para-crear-las-tablas-mysql","title":"Script SQL para Crear las Tablas (MySQL)","text":"<pre><code>-- Crear la tabla Categorias\nCREATE TABLE Categorias (\n    id_categoria INT PRIMARY KEY,\n    nombre_categoria VARCHAR(50) NOT NULL,\n    descripcion VARCHAR(100)\n);\n\n-- Crear la tabla Proveedores\nCREATE TABLE Proveedores (\n    id_proveedor INT PRIMARY KEY,\n    nombre_proveedor VARCHAR(100) NOT NULL,\n    ciudad VARCHAR(50)\n);\n\n-- Crear la tabla Productos\nCREATE TABLE Productos (\n    id_producto INT PRIMARY KEY,\n    nombre_producto VARCHAR(100) NOT NULL,\n    precio DECIMAL(10, 2) NOT NULL,\n    id_categoria INT,\n    id_proveedor INT,\n    FOREIGN KEY (id_categoria) REFERENCES Categorias(id_categoria),\n    FOREIGN KEY (id_proveedor) REFERENCES Proveedores(id_proveedor)\n);\n\n-- Crear la tabla Garantias\nCREATE TABLE Garantias (\n    id_garantia INT PRIMARY KEY,\n    id_producto INT UNIQUE,\n    duracion_meses INT NOT NULL,\n    condiciones VARCHAR(200),\n    FOREIGN KEY (id_producto) REFERENCES Productos(id_producto)\n);\n</code></pre> <p>Explicaci\u00f3n:</p> <ul> <li><code>ENGINE=InnoDB</code> asegura soporte para claves for\u00e1neas en MySQL.</li> <li><code>PRIMARY KEY</code> asegura identificadores \u00fanicos.</li> <li><code>NOT NULL</code> obliga a que ciertos campos no est\u00e9n vac\u00edos.</li> <li><code>FOREIGN KEY</code> establece relaciones:</li> <li>Uno a muchos: <code>Productos.id_categoria</code> \u2192 <code>Categorias.id_categoria</code>, <code>Productos.id_proveedor</code> \u2192 <code>Proveedores.id_proveedor</code>.</li> <li>Uno a uno: <code>Garantias.id_producto</code> \u2192 <code>Productos.id_producto</code> (el <code>UNIQUE</code> asegura una garant\u00eda por producto).</li> </ul>"},{"location":"content/p4/#paso-2-insertando-datos","title":"Paso 2: Insertando Datos","text":"<p>Poblaremos las tablas con 10 registros cada una (excepto Garantias, con 5 registros para reflejar que no todos los productos tienen garant\u00eda). Los datos son realistas para el mercado colombiano en 2025.</p>"},{"location":"content/p4/#insertar-datos-en-la-tabla-categorias","title":"Insertar Datos en la Tabla Categorias","text":"<pre><code>INSERT INTO Categorias (id_categoria, nombre_categoria, descripcion) VALUES\n(1, 'Celulares', 'Tel\u00e9fonos m\u00f3viles y smartphones'),\n(2, 'Port\u00e1tiles', 'Computadoras port\u00e1tiles para trabajo y estudio'),\n(3, 'Accesorios', 'Aud\u00edfonos, cargadores y otros accesorios'),\n(4, 'Tabletas', 'Dispositivos t\u00e1ctiles port\u00e1tiles'),\n(5, 'C\u00e1maras', 'C\u00e1maras digitales y accesorios fotogr\u00e1ficos'),\n(6, 'Televisores', 'Televisores LED y Smart TVs'),\n(7, 'Consolas', 'Consolas de videojuegos y accesorios'),\n(8, 'Parlantes', 'Parlantes Bluetooth y sistemas de sonido'),\n(9, 'Smartwatches', 'Relojes inteligentes y wearables'),\n(10, 'Perif\u00e9ricos', 'Teclados, ratones y otros dispositivos');\n</code></pre>"},{"location":"content/p4/#insertar-datos-en-la-tabla-proveedores","title":"Insertar Datos en la Tabla Proveedores","text":"<pre><code>INSERT INTO Proveedores (id_proveedor, nombre_proveedor, ciudad) VALUES\n(1, 'Samsung Colombia', 'Bogot\u00e1'),\n(2, 'Apple Colombia', 'Medell\u00edn'),\n(3, 'HP Colombia', 'Cali'),\n(4, 'Lenovo Colombia', 'Bogot\u00e1'),\n(5, 'JBL Distribuciones', 'Barranquilla'),\n(6, 'LG Colombia', 'Medell\u00edn'),\n(7, 'Sony Colombia', 'Bogot\u00e1'),\n(8, 'Bose Colombia', 'Cali'),\n(9, 'Xiaomi Colombia', 'Cartagena'),\n(10, 'Asus Colombia', 'Medell\u00edn');\n</code></pre>"},{"location":"content/p4/#insertar-datos-en-la-tabla-productos","title":"Insertar Datos en la Tabla Productos","text":"<pre><code>INSERT INTO Productos (id_producto, nombre_producto, precio, id_categoria, id_proveedor) VALUES\n(1, 'Samsung Galaxy A54', 1500000.00, 1, 1),\n(2, 'iPhone 14', 4500000.00, 1, 2),\n(3, 'HP Pavilion 15', 3500000.00, 2, 3),\n(4, 'Lenovo IdeaPad 3', 2800000.00, 2, 4),\n(5, 'Aud\u00edfonos JBL T110', 80000.00, 3, 5),\n(6, 'iPad Air 2024', 3200000.00, 4, 2),\n(7, 'C\u00e1mara Canon EOS M50', 2800000.00, 5, 7),\n(8, 'Televisor LG 50\" 4K', 2200000.00, 6, 6),\n(9, 'PlayStation 5 Slim', 3000000.00, 7, 7),\n(10, 'Parlante Bose SoundLink Mini', 900000.00, 8, 8);\n</code></pre>"},{"location":"content/p4/#insertar-datos-en-la-tabla-garantias","title":"Insertar Datos en la Tabla Garantias","text":"<pre><code>INSERT INTO Garantias (id_garantia, id_producto, duracion_meses, condiciones) VALUES\n(1, 1, 12, 'Garant\u00eda por defectos de f\u00e1brica'),\n(2, 2, 24, 'Garant\u00eda extendida AppleCare'),\n(3, 3, 12, 'Garant\u00eda est\u00e1ndar HP'),\n(4, 6, 24, 'Garant\u00eda por defectos de f\u00e1brica'),\n(5, 9, 12, 'Garant\u00eda Sony para consolas');\n</code></pre> <p>Nota: Solo 5 productos tienen garant\u00edas para ilustrar la relaci\u00f3n uno a uno. Los precios en COP son aproximados para el mercado colombiano.</p>"},{"location":"content/p4/#paso-3-entendiendo-las-relaciones-en-bases-de-datos","title":"Paso 3: Entendiendo las Relaciones en Bases de Datos","text":""},{"location":"content/p4/#que-es-una-relacion","title":"\u00bfQu\u00e9 es una Relaci\u00f3n?","text":"<p>Una relaci\u00f3n conecta tablas para evitar redundancia y mantener datos organizados. En nuestro ejemplo:</p> <ul> <li>Uno a muchos (Categorias-Productos): Una categor\u00eda puede tener muchos productos, pero cada producto pertenece a una sola categor\u00eda.</li> <li>Uno a muchos (Proveedores-Productos): Un proveedor puede suministrar muchos productos, pero cada producto tiene un solo proveedor.</li> <li>Uno a uno (Productos-Garantias): Un producto puede tener a lo sumo una garant\u00eda, y cada garant\u00eda est\u00e1 asociada a un solo producto.</li> </ul>"},{"location":"content/p4/#por-que-es-importante","title":"\u00bfPor qu\u00e9 es Importante?","text":"<p>Sin relaciones, repetir\u00edamos datos (como nombres de categor\u00edas o proveedores), complicando actualizaciones. Las relaciones:</p> <ul> <li>Almacenan datos \u00fanicos en tablas separadas.</li> <li>Usan claves for\u00e1neas para conectarlas.</li> <li>Aseguran consistencia y ahorran espacio.</li> </ul>"},{"location":"content/p4/#diagrama-de-las-relaciones-descripcion-visual","title":"Diagrama de las Relaciones (Descripci\u00f3n Visual)","text":"<p>Imagina cuatro cajas:</p> <ul> <li>Caja 1 (Categorias): <code>id_categoria</code>, <code>nombre_categoria</code>, <code>descripcion</code>.</li> <li>Caja 2 (Proveedores): <code>id_proveedor</code>, <code>nombre_proveedor</code>, <code>ciudad</code>.</li> <li>Caja 3 (Productos): <code>id_producto</code>, <code>nombre_producto</code>, <code>precio</code>, <code>id_categoria</code>, <code>id_proveedor</code>.</li> <li>Caja 4 (Garantias): <code>id_garantia</code>, <code>id_producto</code>, <code>duracion_meses</code>, <code>condiciones</code>.</li> <li>Flechas:</li> <li><code>Productos.id_categoria</code> \u2192 <code>Categorias.id_categoria</code> (uno a muchos).</li> <li><code>Productos.id_proveedor</code> \u2192 <code>Proveedores.id_proveedor</code> (uno a muchos).</li> <li><code>Garantias.id_producto</code> \u2192 <code>Productos.id_producto</code> (uno a uno).</li> </ul>"},{"location":"content/p4/#paso-4-explicando-los-joins-en-sql-mysql","title":"Paso 4: Explicando los JOINs en SQL (MySQL)","text":"<p>Los JOINs combinan filas de tablas bas\u00e1ndose en condiciones. En MySQL, exploraremos INNER JOIN, LEFT JOIN, RIGHT JOIN, y emularemos FULL JOIN usando <code>UNION</code>.</p>"},{"location":"content/p4/#1-inner-join","title":"1. INNER JOIN","text":""},{"location":"content/p4/#que-es","title":"\u00bfQu\u00e9 es?","text":"<p>Devuelve solo las filas con coincidencias en ambas tablas.</p>"},{"location":"content/p4/#ejemplo-productos-con-categorias-y-proveedores","title":"Ejemplo: Productos con Categor\u00edas y Proveedores","text":"<pre><code>SELECT \n    p.id_producto, \n    p.nombre_producto, \n    p.precio, \n    c.nombre_categoria, \n    pr.nombre_proveedor\nFROM Productos p\nINNER JOIN Categorias c ON p.id_categoria = c.id_categoria\nINNER JOIN Proveedores pr ON p.id_proveedor = pr.id_proveedor;\n</code></pre>"},{"location":"content/p4/#explicacion","title":"Explicaci\u00f3n","text":"<ul> <li>Combina Productos con Categorias y Proveedores donde <code>id_categoria</code> y <code>id_proveedor</code> coinciden.</li> <li>Solo muestra productos con categor\u00eda y proveedor asignados.</li> </ul>"},{"location":"content/p4/#resultado","title":"Resultado","text":"id_producto nombre_producto precio nombre_categoria nombre_proveedor 1 Samsung Galaxy A54 1500000.00 Celulares Samsung Colombia 2 iPhone 14 4500000.00 Celulares Apple Colombia 3 HP Pavilion 15 3500000.00 Port\u00e1tiles HP Colombia 4 Lenovo IdeaPad 3 2800000.00 Port\u00e1tiles Lenovo Colombia 5 Aud\u00edfonos JBL T110 80000.00 Accesorios JBL Distribuciones 6 iPad Air 2024 3200000.00 Tabletas Apple Colombia 7 C\u00e1mara Canon EOS M50 2800000.00 C\u00e1maras Sony Colombia 8 Televisor LG 50\" 4K 2200000.00 Televisores LG Colombia 9 PlayStation 5 Slim 3000000.00 Consolas Sony Colombia 10 Parlante Bose SoundLink Mini 900000.00 Parlantes Bose Colombia"},{"location":"content/p4/#2-left-join","title":"2. LEFT JOIN","text":""},{"location":"content/p4/#que-es_1","title":"\u00bfQu\u00e9 es?","text":"<p>Devuelve todas las filas de la tabla izquierda y las coincidentes de la derecha, con <code>NULL</code> si no hay coincidencia.</p>"},{"location":"content/p4/#ejemplo-productos-con-garantias","title":"Ejemplo: Productos con Garant\u00edas","text":"<pre><code>SELECT \n    p.id_producto, \n    p.nombre_producto, \n    p.precio, \n    g.duracion_meses, \n    g.condiciones\nFROM Productos p\nLEFT JOIN Garantias g ON p.id_producto = g.id_producto;\n</code></pre>"},{"location":"content/p4/#explicacion_1","title":"Explicaci\u00f3n","text":"<ul> <li>Muestra todos los productos, incluyendo aquellos sin garant\u00eda (con <code>NULL</code> en las columnas de Garantias).</li> </ul>"},{"location":"content/p4/#resultado_1","title":"Resultado","text":"id_producto nombre_producto precio duracion_meses condiciones 1 Samsung Galaxy A54 1500000.00 12 Garant\u00eda por defectos de f\u00e1brica 2 iPhone 14 4500000.00 24 Garant\u00eda extendida AppleCare 3 HP Pavilion 15 3500000.00 12 Garant\u00eda est\u00e1ndar HP 4 Lenovo IdeaPad 3 2800000.00 NULL NULL 5 Aud\u00edfonos JBL T110 80000.00 NULL NULL 6 iPad Air 2024 3200000.00 24 Garant\u00eda por defectos de f\u00e1brica 7 C\u00e1mara Canon EOS M50 2800000.00 NULL NULL 8 Televisor LG 50\" 4K 2200000.00 NULL NULL 9 PlayStation 5 Slim 3000000.00 12 Garant\u00eda Sony para consolas 10 Parlante Bose SoundLink Mini 900000.00 NULL NULL"},{"location":"content/p4/#3-right-join","title":"3. RIGHT JOIN","text":""},{"location":"content/p4/#que-es_2","title":"\u00bfQu\u00e9 es?","text":"<p>Devuelve todas las filas de la tabla derecha y las coincidentes de la izquierda, con <code>NULL</code> si no hay coincidencia.</p>"},{"location":"content/p4/#ejemplo-proveedores-y-productos","title":"Ejemplo: Proveedores y Productos","text":"<pre><code>SELECT \n    p.id_producto, \n    p.nombre_producto, \n    p.precio, \n    pr.nombre_proveedor\nFROM Productos p\nRIGHT JOIN Proveedores pr ON p.id_proveedor = pr.id_proveedor;\n</code></pre>"},{"location":"content/p4/#explicacion_2","title":"Explicaci\u00f3n","text":"<ul> <li>Muestra todos los proveedores, incluyendo aquellos sin productos (con <code>NULL</code> en las columnas de Productos).</li> </ul>"},{"location":"content/p4/#resultado_2","title":"Resultado","text":"id_producto nombre_producto precio nombre_proveedor 1 Samsung Galaxy A54 1500000.00 Samsung Colombia 2 iPhone 14 4500000.00 Apple Colombia 6 iPad Air 2024 3200000.00 Apple Colombia 3 HP Pavilion 15 3500000.00 HP Colombia 4 Lenovo IdeaPad 3 2800000.00 Lenovo Colombia 5 Aud\u00edfonos JBL T110 80000.00 JBL Distribuciones 8 Televisor LG 50\" 4K 2200000.00 LG Colombia 7 C\u00e1mara Canon EOS M50 2800000.00 Sony Colombia 9 PlayStation 5 Slim 3000000.00 Sony Colombia 10 Parlante Bose SoundLink Mini 900000.00 Bose Colombia NULL NULL NULL Xiaomi Colombia NULL NULL NULL Asus Colombia"},{"location":"content/p4/#4-emulacion-de-full-join-mysql","title":"4. Emulaci\u00f3n de FULL JOIN (MySQL)","text":""},{"location":"content/p4/#que-es_3","title":"\u00bfQu\u00e9 es?","text":"<p>MySQL no soporta FULL JOIN, pero podemos emularlo combinando un LEFT JOIN y un RIGHT JOIN con <code>UNION</code>.</p>"},{"location":"content/p4/#ejemplo-productos-y-garantias","title":"Ejemplo: Productos y Garant\u00edas","text":"<pre><code>SELECT \n    p.id_producto, \n    p.nombre_producto, \n    p.precio, \n    g.duracion_meses, \n    g.condiciones\nFROM Productos p\nLEFT JOIN Garantias g ON p.id_producto = g.id_producto\nUNION\nSELECT \n    p.id_producto, \n    p.nombre_producto, \n    p.precio, \n    g.duracion_meses, \n    g.condiciones\nFROM Productos p\nRIGHT JOIN Garantias g ON p.id_producto = g.id_producto\nWHERE p.id_producto IS NULL;\n</code></pre>"},{"location":"content/p4/#explicacion_3","title":"Explicaci\u00f3n","text":"<ul> <li>El LEFT JOIN incluye todos los productos, con <code>NULL</code> para los sin garant\u00eda.</li> <li>El RIGHT JOIN con <code>WHERE p.id_producto IS NULL</code> incluir\u00eda garant\u00edas sin producto asociado (en este caso, ninguna, debido a la restricci\u00f3n <code>FOREIGN KEY</code>).</li> <li><code>UNION</code> combina los resultados, eliminando duplicados.</li> </ul>"},{"location":"content/p4/#resultado_3","title":"Resultado","text":"id_producto nombre_producto precio duracion_meses condiciones 1 Samsung Galaxy A54 1500000.00 12 Garant\u00eda por defectos de f\u00e1brica 2 iPhone 14 4500000.00 24 Garant\u00eda extendida AppleCare 3 HP Pavilion 15 3500000.00 12 Garant\u00eda est\u00e1ndar HP 4 Lenovo IdeaPad 3 2800000.00 NULL NULL 5 Aud\u00edfonos JBL T110 80000.00 NULL NULL 6 iPad Air 2024 3200000.00 24 Garant\u00eda por defectos de f\u00e1brica 7 C\u00e1mara Canon EOS M50 2800000.00 NULL NULL 8 Televisor LG 50\" 4K 2200000.00 NULL NULL 9 PlayStation 5 Slim 3000000.00 12 Garant\u00eda Sony para consolas 10 Parlante Bose SoundLink Mini 900000.00 NULL NULL <p>Nota: En este caso, el resultado es id\u00e9ntico al LEFT JOIN, ya que no hay garant\u00edas sin producto asociado debido a la restricci\u00f3n <code>FOREIGN KEY</code>.</p>"},{"location":"content/p4/#paso-5-ejercicios-practicos-resueltos","title":"Paso 5: Ejercicios Pr\u00e1cticos Resueltos","text":"<p>Resolvemos los cinco ejercicios con consultas SQL compatibles con MySQL y explicaciones detalladas.</p>"},{"location":"content/p4/#ejercicio-1-inner-join","title":"Ejercicio 1: INNER JOIN","text":"<p>Enunciado: Muestra los productos de la categor\u00eda \"Celulares\" con el nombre del proveedor. Incluye <code>nombre_producto</code>, <code>precio</code>, <code>nombre_categoria</code> y <code>nombre_proveedor</code>.</p>"},{"location":"content/p4/#consulta-sql","title":"Consulta SQL","text":"<pre><code>SELECT \n    p.nombre_producto, \n    p.precio, \n    c.nombre_categoria, \n    pr.nombre_proveedor\nFROM Productos p\nINNER JOIN Categorias c ON p.id_categoria = c.id_categoria\nINNER JOIN Proveedores pr ON p.id_proveedor = pr.id_proveedor\nWHERE c.nombre_categoria = 'Celulares';\n</code></pre>"},{"location":"content/p4/#explicacion_4","title":"Explicaci\u00f3n","text":"<ul> <li>Usa INNER JOIN para combinar Productos, Categorias, y Proveedores.</li> <li>Filtra con <code>WHERE</code> para mostrar solo la categor\u00eda \"Celulares\".</li> <li>Selecciona columnas relevantes.</li> </ul>"},{"location":"content/p4/#resultado_4","title":"Resultado","text":"nombre_producto precio nombre_categoria nombre_proveedor Samsung Galaxy A54 1500000.00 Celulares Samsung Colombia iPhone 14 4500000.00 Celulares Apple Colombia <p>Por qu\u00e9: Solo muestra los dos productos de la categor\u00eda \"Celulares\" con sus proveedores.</p>"},{"location":"content/p4/#ejercicio-2-left-join","title":"Ejercicio 2: LEFT JOIN","text":"<p>Enunciado: Lista todos los productos con su garant\u00eda (si la tienen). Muestra <code>nombre_producto</code>, <code>precio</code>, <code>duracion_meses</code> y <code>condiciones</code>.</p>"},{"location":"content/p4/#consulta-sql_1","title":"Consulta SQL","text":"<pre><code>SELECT \n    p.nombre_producto, \n    p.precio, \n    g.duracion_meses, \n    g.condiciones\nFROM Productos p\nLEFT JOIN Garantias g ON p.id_producto = g.id_producto;\n</code></pre>"},{"location":"content/p4/#explicacion_5","title":"Explicaci\u00f3n","text":"<ul> <li>Usa LEFT JOIN para incluir todos los productos, incluso los sin garant\u00eda.</li> <li>Las columnas de Garantias ser\u00e1n <code>NULL</code> para productos sin garant\u00eda.</li> </ul>"},{"location":"content/p4/#resultado_5","title":"Resultado","text":"nombre_producto precio duracion_meses condiciones Samsung Galaxy A54 1500000.00 12 Garant\u00eda por defectos de f\u00e1brica iPhone 14 4500000.00 24 Garant\u00eda extendida AppleCare HP Pavilion 15 3500000.00 12 Garant\u00eda est\u00e1ndar HP Lenovo IdeaPad 3 2800000.00 NULL NULL Aud\u00edfonos JBL T110 80000.00 NULL NULL iPad Air 2024 3200000.00 24 Garant\u00eda por defectos de f\u00e1brica C\u00e1mara Canon EOS M50 2800000.00 NULL NULL Televisor LG 50\" 4K 2200000.00 NULL NULL PlayStation 5 Slim 3000000.00 12 Garant\u00eda Sony para consolas Parlante Bose SoundLink Mini 900000.00 NULL NULL <p>Por qu\u00e9: Muestra todos los productos, con <code>NULL</code> para los cinco sin garant\u00eda.</p>"},{"location":"content/p4/#ejercicio-3-right-join","title":"Ejercicio 3: RIGHT JOIN","text":"<p>Enunciado: Muestra todas las categor\u00edas y los productos asociados (si los hay), ordenados por <code>nombre_categoria</code>.</p>"},{"location":"content/p4/#consulta-sql_2","title":"Consulta SQL","text":"<pre><code>SELECT \n    c.nombre_categoria, \n    p.nombre_producto, \n    p.precio\nFROM Productos p\nRIGHT JOIN Categorias c ON p.id_categoria = c.id_categoria\nORDER BY c.nombre_categoria;\n</code></pre>"},{"location":"content/p4/#explicacion_6","title":"Explicaci\u00f3n","text":"<ul> <li>Usa RIGHT JOIN para incluir todas las categor\u00edas, incluso las sin productos.</li> <li>Ordena por <code>nombre_categoria</code> con <code>ORDER BY</code>.</li> <li>Las columnas de Productos ser\u00e1n <code>NULL</code> para categor\u00edas sin productos.</li> </ul>"},{"location":"content/p4/#resultado_6","title":"Resultado","text":"nombre_categoria nombre_producto precio Accesorios Aud\u00edfonos JBL T110 80000.00 C\u00e1maras C\u00e1mara Canon EOS M50 2800000.00 Celulares Samsung Galaxy A54 1500000.00 Celulares iPhone 14 4500000.00 Consolas PlayStation 5 Slim 3000000.00 Parlantes Parlante Bose SoundLink Mini 900000.00 Perif\u00e9ricos NULL NULL Port\u00e1tiles HP Pavilion 15 3500000.00 Port\u00e1tiles Lenovo IdeaPad 3 2800000.00 Smartwatches NULL NULL Tabletas iPad Air 2024 3200000.00 Televisores Televisor LG 50\" 4K 2200000.00 <p>Por qu\u00e9: Incluye todas las categor\u00edas; \"Smartwatches\" y \"Perif\u00e9ricos\" no tienen productos.</p>"},{"location":"content/p4/#ejercicio-4-emulacion-de-full-join","title":"Ejercicio 4: Emulaci\u00f3n de FULL JOIN","text":"<p>Enunciado: Combina Productos y Garantias para mostrar todos los productos y garant\u00edas, indicando d\u00f3nde no hay relaci\u00f3n.</p>"},{"location":"content/p4/#consulta-sql_3","title":"Consulta SQL","text":"<pre><code>SELECT \n    p.nombre_producto, \n    p.precio, \n    g.duracion_meses, \n    g.condiciones\nFROM Productos p\nLEFT JOIN Garantias g ON p.id_producto = g.id_producto\nUNION\nSELECT \n    p.nombre_producto, \n    p.precio, \n    g.duracion_meses, \n    g.condiciones\nFROM Productos p\nRIGHT JOIN Garantias g ON p.id_producto = g.id_producto\nWHERE p.id_producto IS NULL;\n</code></pre>"},{"location":"content/p4/#explicacion_7","title":"Explicaci\u00f3n","text":"<ul> <li>Emula FULL JOIN en MySQL.</li> <li>El LEFT JOIN incluye todos los productos.</li> <li>El RIGHT JOIN con <code>WHERE p.id_producto IS NULL</code> incluir\u00eda garant\u00edas sin producto (ninguna en este caso).</li> <li><code>UNION</code> combina los resultados.</li> </ul>"},{"location":"content/p4/#resultado_7","title":"Resultado","text":"<p>Igual al LEFT JOIN (ver Ejercicio 2), ya que no hay garant\u00edas sin producto asociado debido a la restricci\u00f3n <code>FOREIGN KEY</code>.</p>"},{"location":"content/p4/#ejercicio-5-analisis","title":"Ejercicio 5: An\u00e1lisis","text":"<p>Enunciado: Cuenta cu\u00e1ntos productos suministra cada proveedor, incluyendo proveedores sin productos. Usa <code>RIGHT JOIN</code> y <code>GROUP BY</code>.</p>"},{"location":"content/p4/#consulta-sql_4","title":"Consulta SQL","text":"<pre><code>SELECT \n    pr.nombre_proveedor, \n    COUNT(p.id_producto) AS cantidad_productos\nFROM Productos p\nRIGHT JOIN Proveedores pr ON p.id_proveedor = pr.id_proveedor\nGROUP BY pr.nombre_proveedor;\n</code></pre>"},{"location":"content/p4/#explicacion_8","title":"Explicaci\u00f3n","text":"<ul> <li>Usa RIGHT JOIN para incluir todos los proveedores.</li> <li><code>COUNT(p.id_producto)</code> cuenta los productos por proveedor.</li> <li><code>GROUP BY</code> agrupa por <code>nombre_proveedor</code>.</li> </ul>"},{"location":"content/p4/#resultado_8","title":"Resultado","text":"nombre_proveedor cantidad_productos Apple Colombia 2 Asus Colombia 0 Bose Colombia 1 HP Colombia 1 JBL Distribuciones 1 Lenovo Colombia 1 LG Colombia 1 Samsung Colombia 1 Sony Colombia 2 Xiaomi Colombia 0 <p>Por qu\u00e9: Muestra cu\u00e1ntos productos tiene cada proveedor; \"Xiaomi Colombia\" y \"Asus Colombia\" tienen 0.</p>"},{"location":"content/p5/","title":"Actividad Final: Creaci\u00f3n de una Actividad Diferente sobre Relaciones y JOINs en SQL (Video de 15 Minutos)","text":""},{"location":"content/p5/#instrucciones","title":"Instrucciones","text":"<p>En grupos, dise\u00f1en y graben un video educativo de 15 minutos que explique los conceptos de relaciones (uno a uno y uno a muchos) y JOINs en SQL (INNER JOIN, LEFT JOIN, RIGHT JOIN, y emulaci\u00f3n de FULL JOIN en MySQL). La actividad debe ser diferente al ejemplo de una tienda de electr\u00f3nicos, pero basada en sus principios: crear tablas, establecer relaciones, insertar datos, explicar relaciones y JOINs, y resolver ejercicios pr\u00e1cticos. Sigan estas pautas paso a paso para realizar la actividad.</p>"},{"location":"content/p5/#pautas-para-la-actividad","title":"Pautas para la Actividad","text":""},{"location":"content/p5/#paso-1-seleccionar-un-contexto-diferente","title":"Paso 1: Seleccionar un Contexto Diferente","text":"<ul> <li>Escojan un contexto realista y original (no una tienda de electr\u00f3nicos) para su base de datos. Ejemplos posibles: una biblioteca, un hospital, un sistema de transporte, una escuela, o una empresa de eventos.</li> <li>Aseg\u00farense de que el contexto permita definir al menos cuatro tablas con relaciones uno a uno y uno a muchos.</li> </ul>"},{"location":"content/p5/#paso-2-disenar-las-tablas","title":"Paso 2: Dise\u00f1ar las Tablas","text":"<ul> <li>Creen cuatro tablas con las siguientes caracter\u00edsticas:</li> <li>Cada tabla debe tener una clave primaria.</li> <li>Incluyan claves for\u00e1neas para establecer:<ul> <li>Al menos dos relaciones uno a muchos (por ejemplo, una tabla principal con varias entradas relacionadas en otra tabla).</li> <li>Al menos una relaci\u00f3n uno a uno (por ejemplo, una tabla con datos \u00fanicos asociados a una sola entrada de otra tabla).</li> </ul> </li> <li>Definan columnas relevantes para el contexto (m\u00ednimo 3 columnas por tabla, incluyendo la clave primaria).</li> <li>Escriban el script SQL para crear las tablas, asegurando compatibilidad con MySQL.</li> </ul>"},{"location":"content/p5/#paso-3-insertar-datos","title":"Paso 3: Insertar Datos","text":"<ul> <li>Poblen las tablas con datos realistas:</li> <li>Inserten al menos 8 registros en las tablas principales (las que no dependen de otras).</li> <li>Para la tabla con relaci\u00f3n uno a uno, inserten menos registros (por ejemplo, 4 o 5) para mostrar que no todas las entradas tienen una relaci\u00f3n.</li> <li>Escriban los scripts SQL para los comandos <code>INSERT</code>.</li> </ul>"},{"location":"content/p5/#paso-4-explicar-relaciones","title":"Paso 4: Explicar Relaciones","text":"<ul> <li>En el video, expliquen:</li> <li>Qu\u00e9 son las relaciones en bases de datos y por qu\u00e9 son importantes (evitar redundancia, mantener consistencia).</li> <li>Las relaciones espec\u00edficas de su dise\u00f1o:<ul> <li>Identifiquen las relaciones uno a muchos (por ejemplo, una entidad con m\u00faltiples registros relacionados).</li> <li>Identifiquen la relaci\u00f3n uno a uno (por ejemplo, un registro con datos exclusivos).</li> </ul> </li> <li>Describan visualmente las relaciones (pueden usar un diagrama simple en una pizarra, presentaci\u00f3n, o software).</li> </ul>"},{"location":"content/p5/#paso-5-explicar-joins","title":"Paso 5: Explicar JOINs","text":"<ul> <li>Introduzcan los JOINs en SQL (compatibles con MySQL):</li> <li>INNER JOIN: Qu\u00e9 es y cu\u00e1ndo usarlo (coincidencias en ambas tablas).</li> <li>LEFT JOIN: Qu\u00e9 es y cu\u00e1ndo usarlo (todas las filas de la tabla izquierda).</li> <li>RIGHT JOIN: Qu\u00e9 es y cu\u00e1ndo usarlo (todas las filas de la tabla derecha).</li> <li>Emulaci\u00f3n de FULL JOIN: C\u00f3mo combinar LEFT y RIGHT JOIN con <code>UNION</code> en MySQL.</li> <li>Para cada tipo de JOIN:</li> <li>Proporcionen un ejemplo pr\u00e1ctico con una consulta SQL basada en sus tablas.</li> <li>Muestren el resultado esperado de la consulta (pueden usar una captura de pantalla o describirlo).</li> <li>Expliquen por qu\u00e9 el resultado es \u00fatil en el contexto elegido.</li> </ul>"},{"location":"content/p5/#paso-6-disenar-ejercicios-practicos","title":"Paso 6: Dise\u00f1ar Ejercicios Pr\u00e1cticos","text":"<ul> <li>Creen cinco ejercicios pr\u00e1cticos que los estudiantes puedan resolver usando JOINs:<ul> <li>Ejercicio 1 (INNER JOIN): Una consulta que combine al menos dos tablas y filtre por una condici\u00f3n espec\u00edfica.</li> <li>Ejercicio 2 (LEFT JOIN): Una consulta que muestre todas las entradas de una tabla, incluso si no tienen relaciones.</li> <li>Ejercicio 3 (RIGHT JOIN): Una consulta que muestre todas las entradas de una tabla secundaria, incluso si no est\u00e1n relacionadas.</li> <li>Ejercicio 4 (Emulaci\u00f3n de FULL JOIN): Una consulta que combine todas las entradas de dos tablas, mostrando relaciones y no relaciones.</li> <li>Ejercicio 5 (An\u00e1lisis): Una consulta que use <code>GROUP BY</code> y una funci\u00f3n de agregaci\u00f3n (como <code>COUNT</code>, <code>SUM</code>, o <code>AVG</code>) con un JOIN para analizar datos.</li> </ul> </li> <li>Para cada ejercicio:<ul> <li>Escriban el enunciado claro.</li> <li>Proporcionen la consulta SQL que lo resuelve.</li> <li>Expliquen el resultado y por qu\u00e9 es relevante en el contexto.</li> </ul> </li> </ul>"},{"location":"content/p5/#paso-7-grabar-el-video","title":"Paso 7: Grabar el Video","text":"<ul> <li>Dividan las tareas entre los miembros del grupo para cubrir los 15 minutos:</li> <li>Introducci\u00f3n (2 minutos): Presenten el contexto, objetivos de la actividad, y por qu\u00e9 aprender relaciones y JOINs es \u00fatil.</li> <li>Explicaci\u00f3n de tablas y relaciones (4 minutos): Muestren los scripts SQL de creaci\u00f3n e inserci\u00f3n, y expliquen las relaciones con un diagrama.</li> <li>Explicaci\u00f3n de JOINs (4 minutos): Detallen cada tipo de JOIN con ejemplos pr\u00e1cticos.</li> <li>Ejercicios pr\u00e1cticos (4 minutos): Presenten los cinco ejercicios, mostrando consultas y resultados.</li> <li>Conclusi\u00f3n (1 minuto): Resuman lo aprendido y motiven a practicar con sus propias bases de datos.</li> <li>Usen un tono claro, visuales (como diagramas o capturas de pantalla), y ejemplos pr\u00e1cticos para mantener el inter\u00e9s.</li> </ul>"},{"location":"content/p5/#paso-8-revisar-y-entregar","title":"Paso 8: Revisar y Entregar","text":"<ul> <li>Aseg\u00farense de que el video:<ul> <li>Dura 15 minutos exactos.</li> <li>Es claro, educativo, y est\u00e1 bien organizado.</li> <li>No replica el ejemplo de la tienda de electr\u00f3nicos, pero sigue su estructura (tablas, relaciones, JOINs, ejercicios).</li> </ul> </li> <li>Entreguen el video junto con un documento que incluya:<ul> <li>Los scripts SQL de creaci\u00f3n de tablas e inserci\u00f3n de datos.</li> <li>Las consultas SQL de los ejemplos de JOINs y los cinco ejercicios.</li> <li>Un breve resumen del contexto elegido.</li> </ul> </li> </ul>"},{"location":"pi/p1/","title":"Introducci\u00f3n Proyecto Integrador","text":""}]}